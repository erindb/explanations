utterance	model	variable	probability	full model results	cost function	speaker alpha	listener alpha	alternative utterances function	most likely world(s)	summary
“aliceWin because bobLazy”	literal	aliceStrong	0.54	“[ { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true } ], [ 0.06267278890304598, 0.10241123157920051, 0.2416520422145825, 0.1379907204846502, 0.06267278890304598, 0.15094838570089178, 0.2416520422145826 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	"""[[aliceStrong, aliceTried, bobStrong, bobWeak, aliceWin], [aliceWeak, aliceTried, bobWeak, bobLazy, aliceWin]]"""	alice tried and has same strength as bob
“aliceWin because bobLazy”	literal	aliceLazy	0.23	“[ { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true } ], [ 0.06267278890304598, 0.10241123157920051, 0.2416520422145825, 0.1379907204846502, 0.06267278890304598, 0.15094838570089178, 0.2416520422145826 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	"""[[aliceStrong, aliceTried, bobStrong, bobWeak, aliceWin], [aliceWeak, aliceTried, bobWeak, bobLazy, aliceWin]]"""	alice tried and has same strength as bob
“aliceWin because bobLazy”	literal	bobStrong	0.46	“[ { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true } ], [ 0.06267278890304598, 0.10241123157920051, 0.2416520422145825, 0.1379907204846502, 0.06267278890304598, 0.15094838570089178, 0.2416520422145826 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	"""[[aliceStrong, aliceTried, bobStrong, bobWeak, aliceWin], [aliceWeak, aliceTried, bobWeak, bobLazy, aliceWin]]"""	alice tried and has same strength as bob
“aliceWin because bobLazy”	literal	bobLazy	1	“[ { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true } ], [ 0.06267278890304598, 0.10241123157920051, 0.2416520422145825, 0.1379907204846502, 0.06267278890304598, 0.15094838570089178, 0.2416520422145826 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	"""[[aliceStrong, aliceTried, bobStrong, bobWeak, aliceWin], [aliceWeak, aliceTried, bobWeak, bobLazy, aliceWin]]"""	alice tried and has same strength as bob
“aliceWin because bobLazy”	literal	aliceWin	1	“[ { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true } ], [ 0.06267278890304598, 0.10241123157920051, 0.2416520422145825, 0.1379907204846502, 0.06267278890304598, 0.15094838570089178, 0.2416520422145826 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	"""[[aliceStrong, aliceTried, bobStrong, bobWeak, aliceWin], [aliceWeak, aliceTried, bobWeak, bobLazy, aliceWin]]"""	alice tried and has same strength as bob
“aliceWin because bobLazy”	listener	aliceStrong	0.09	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.09386521468800263, 0.8122687689956913, 2.477587432670802e-7, 2.580030109297685e-7, 0.09386521468800163, 4.810780407095736e-8, 2.477587432670802e-7 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceWeak, aliceTried, bobStrong, bobLazy, aliceWin]]	alice weak but tried, bob strong
“aliceWin because bobLazy”	listener	aliceLazy	0	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.09386521468800263, 0.8122687689956913, 2.477587432670802e-7, 2.580030109297685e-7, 0.09386521468800163, 4.810780407095736e-8, 2.477587432670802e-7 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceWeak, aliceTried, bobStrong, bobLazy, aliceWin]]	alice weak but tried, bob strong
“aliceWin because bobLazy”	listener	bobStrong	0.91	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.09386521468800263, 0.8122687689956913, 2.477587432670802e-7, 2.580030109297685e-7, 0.09386521468800163, 4.810780407095736e-8, 2.477587432670802e-7 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceWeak, aliceTried, bobStrong, bobLazy, aliceWin]]	alice weak but tried, bob strong
“aliceWin because bobLazy”	listener	bobLazy	1	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.09386521468800263, 0.8122687689956913, 2.477587432670802e-7, 2.580030109297685e-7, 0.09386521468800163, 4.810780407095736e-8, 2.477587432670802e-7 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceWeak, aliceTried, bobStrong, bobLazy, aliceWin]]	alice weak but tried, bob strong
“aliceWin because bobLazy”	listener	aliceWin	1	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.09386521468800263, 0.8122687689956913, 2.477587432670802e-7, 2.580030109297685e-7, 0.09386521468800163, 4.810780407095736e-8, 2.477587432670802e-7 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceWeak, aliceTried, bobStrong, bobLazy, aliceWin]]	alice weak but tried, bob strong
“aliceWin because aliceStrong”	literal	aliceStrong	1	“[ { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true } ],[ 0.03771874474750841, 0.06312082728292233, 0.08993918820245615, 0.1494421681734141, 0.2179589977304644, 0.09096144361200574, 0.35085863025122876 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because aliceStrong”	literal	aliceLazy	0.19	“[ { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true } ],[ 0.03771874474750841, 0.06312082728292233, 0.08993918820245615, 0.1494421681734141, 0.2179589977304644, 0.09096144361200574, 0.35085863025122876 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because aliceStrong”	literal	bobStrong	0.41	“[ { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true } ],[ 0.03771874474750841, 0.06312082728292233, 0.08993918820245615, 0.1494421681734141, 0.2179589977304644, 0.09096144361200574, 0.35085863025122876 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because aliceStrong”	literal	bobLazy	0.34	“[ { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true } ],[ 0.03771874474750841, 0.06312082728292233, 0.08993918820245615, 0.1494421681734141, 0.2179589977304644, 0.09096144361200574, 0.35085863025122876 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because aliceStrong”	literal	aliceWin	1	“[ { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true } ],[ 0.03771874474750841, 0.06312082728292233, 0.08993918820245615, 0.1494421681734141, 0.2179589977304644, 0.09096144361200574, 0.35085863025122876 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because aliceStrong”	listener	aliceStrong	1	“[ { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.974016685258384, 8.941386143691799e-12, 0.02598265524348977, 6.594250741513612e-7, 6.291832967953059e-11, 3.1076807135161267e-13, 8.822217754629614e-13 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because aliceStrong”	listener	aliceLazy	0	“[ { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.974016685258384, 8.941386143691799e-12, 0.02598265524348977, 6.594250741513612e-7, 6.291832967953059e-11, 3.1076807135161267e-13, 8.822217754629614e-13 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because aliceStrong”	listener	bobStrong	0.03	“[ { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.974016685258384, 8.941386143691799e-12, 0.02598265524348977, 6.594250741513612e-7, 6.291832967953059e-11, 3.1076807135161267e-13, 8.822217754629614e-13 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because aliceStrong”	listener	bobLazy	0	“[ { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.974016685258384, 8.941386143691799e-12, 0.02598265524348977, 6.594250741513612e-7, 6.291832967953059e-11, 3.1076807135161267e-13, 8.822217754629614e-13 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because aliceStrong”	listener	aliceWin	1	“[ { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.974016685258384, 8.941386143691799e-12, 0.02598265524348977, 6.594250741513612e-7, 6.291832967953059e-11, 3.1076807135161267e-13, 8.822217754629614e-13 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because !aliceLazy”	literal	aliceStrong	0.64	“[ { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true } ],[ 0.11856624275789118, 0.16844964781114016, 0.0764478207563046, 0.27934706829819467, 0.07017332980743804, 0.11856624275789118, 0.16844964781114014 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceWeak, aliceTried, bobWeak, bobTried, aliceWin]]	both weak, both tried
“aliceWin because !aliceLazy”	literal	aliceLazy	0	“[ { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true } ],[ 0.11856624275789118, 0.16844964781114016, 0.0764478207563046, 0.27934706829819467, 0.07017332980743804, 0.11856624275789118, 0.16844964781114014 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceWeak, aliceTried, bobWeak, bobTried, aliceWin]]	both weak, both tried
“aliceWin because !aliceLazy”	literal	bobStrong	0.36	“[ { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true } ],[ 0.11856624275789118, 0.16844964781114016, 0.0764478207563046, 0.27934706829819467, 0.07017332980743804, 0.11856624275789118, 0.16844964781114014 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceWeak, aliceTried, bobWeak, bobTried, aliceWin]]	both weak, both tried
“aliceWin because !aliceLazy”	literal	bobLazy	0.38	“[ { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true } ],[ 0.11856624275789118, 0.16844964781114016, 0.0764478207563046, 0.27934706829819467, 0.07017332980743804, 0.11856624275789118, 0.16844964781114014 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceWeak, aliceTried, bobWeak, bobTried, aliceWin]]	both weak, both tried
“aliceWin because !aliceLazy”	literal	aliceWin	1	“[ { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true } ],[ 0.11856624275789118, 0.16844964781114016, 0.0764478207563046, 0.27934706829819467, 0.07017332980743804, 0.11856624275789118, 0.16844964781114014 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceWeak, aliceTried, bobWeak, bobTried, aliceWin]]	both weak, both tried
“aliceWin because !aliceLazy”	listener	aliceStrong	0.99	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.01236862432541054, 6.048088576410609e-7, 0.0000013587476895775925, 0.9752601829491507, 3.4622165574533773e-11, 0.012368624325410672, 6.048088576410609e-7 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because !aliceLazy”	listener	aliceLazy	0	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.01236862432541054, 6.048088576410609e-7, 0.0000013587476895775925, 0.9752601829491507, 3.4622165574533773e-11, 0.012368624325410672, 6.048088576410609e-7 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because !aliceLazy”	listener	bobStrong	0.01	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.01236862432541054, 6.048088576410609e-7, 0.0000013587476895775925, 0.9752601829491507, 3.4622165574533773e-11, 0.012368624325410672, 6.048088576410609e-7 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because !aliceLazy”	listener	bobLazy	0	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.01236862432541054, 6.048088576410609e-7, 0.0000013587476895775925, 0.9752601829491507, 3.4622165574533773e-11, 0.012368624325410672, 6.048088576410609e-7 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because !aliceLazy”	listener	aliceWin	1	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.01236862432541054, 6.048088576410609e-7, 0.0000013587476895775925, 0.9752601829491507, 3.4622165574533773e-11, 0.012368624325410672, 6.048088576410609e-7 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because !bobStrong”	literal	aliceStrong	0.59	“[ { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true } ],[ 0.06312082728292227, 0.08993918820245615, 0.09096144361200582, 0.35085863025122876, 0.03771874474750844, 0.14944216817341407, 0.21795899773046437 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because !bobStrong”	literal	aliceLazy	0.19	“[ { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true } ],[ 0.06312082728292227, 0.08993918820245615, 0.09096144361200582, 0.35085863025122876, 0.03771874474750844, 0.14944216817341407, 0.21795899773046437 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because !bobStrong”	literal	bobStrong	0	“[ { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true } ],[ 0.06312082728292227, 0.08993918820245615, 0.09096144361200582, 0.35085863025122876, 0.03771874474750844, 0.14944216817341407, 0.21795899773046437 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because !bobStrong”	literal	bobLazy	0.34	“[ { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true } ],[ 0.06312082728292227, 0.08993918820245615, 0.09096144361200582, 0.35085863025122876, 0.03771874474750844, 0.14944216817341407, 0.21795899773046437 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because !bobStrong”	literal	aliceWin	1	“[ { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true } ],[ 0.06312082728292227, 0.08993918820245615, 0.09096144361200582, 0.35085863025122876, 0.03771874474750844, 0.14944216817341407, 0.21795899773046437 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because !bobStrong”	listener	aliceStrong	0.97	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true } ][ 0.02598265524348922, 6.594250741513565e-7, 8.822217754629928e-13, 0.974016685258384, 8.941386143691926e-12, 6.291832967953059e-11, 3.1076807135160606e-13 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because !bobStrong”	listener	aliceLazy	0	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true } ][ 0.02598265524348922, 6.594250741513565e-7, 8.822217754629928e-13, 0.974016685258384, 8.941386143691926e-12, 6.291832967953059e-11, 3.1076807135160606e-13 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because !bobStrong”	listener	bobStrong	0	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true } ][ 0.02598265524348922, 6.594250741513565e-7, 8.822217754629928e-13, 0.974016685258384, 8.941386143691926e-12, 6.291832967953059e-11, 3.1076807135160606e-13 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because !bobStrong”	listener	bobLazy	0	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true } ][ 0.02598265524348922, 6.594250741513565e-7, 8.822217754629928e-13, 0.974016685258384, 8.941386143691926e-12, 6.291832967953059e-11, 3.1076807135160606e-13 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because !bobStrong”	listener	aliceWin	1	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true } ][ 0.02598265524348922, 6.594250741513565e-7, 8.822217754629928e-13, 0.974016685258384, 8.941386143691926e-12, 6.291832967953059e-11, 3.1076807135160606e-13 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because bobLazy”	listener	aliceStrong	0.37	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.2920621195550606, 0.31102979094924904, 0.026740382624249808, 0.023669504074406336, 0.2920621195550606, 0.0276957006177233, 0.026740382624249995 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"		
“aliceWin because bobLazy”	listener	aliceLazy	0.08	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.2920621195550606, 0.31102979094924904, 0.026740382624249808, 0.023669504074406336, 0.2920621195550606, 0.0276957006177233, 0.026740382624249995 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"		
“aliceWin because bobLazy”	listener	bobStrong	0.63	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.2920621195550606, 0.31102979094924904, 0.026740382624249808, 0.023669504074406336, 0.2920621195550606, 0.0276957006177233, 0.026740382624249995 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"		
“aliceWin because bobLazy”	listener	bobLazy	1	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.2920621195550606, 0.31102979094924904, 0.026740382624249808, 0.023669504074406336, 0.2920621195550606, 0.0276957006177233, 0.026740382624249995 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"		
“aliceWin because bobLazy”	listener	aliceWin	1	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.2920621195550606, 0.31102979094924904, 0.026740382624249808, 0.023669504074406336, 0.2920621195550606, 0.0276957006177233, 0.026740382624249995 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"		
“aliceWin because aliceStrong”	listener	aliceStrong	1	“[ { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.45138844935342276, 0.004940542058680825, 0.4588792899870252, 0.04430337536312064, 0.032816206581863454, 0.004131292595192789, 0.0035408440606958065 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"		
“aliceWin because aliceStrong”	listener	aliceLazy	0.04	“[ { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.45138844935342276, 0.004940542058680825, 0.4588792899870252, 0.04430337536312064, 0.032816206581863454, 0.004131292595192789, 0.0035408440606958065 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"		
“aliceWin because aliceStrong”	listener	bobStrong	0.51	“[ { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.45138844935342276, 0.004940542058680825, 0.4588792899870252, 0.04430337536312064, 0.032816206581863454, 0.004131292595192789, 0.0035408440606958065 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"		
“aliceWin because aliceStrong”	listener	bobLazy	0.06	“[ { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.45138844935342276, 0.004940542058680825, 0.4588792899870252, 0.04430337536312064, 0.032816206581863454, 0.004131292595192789, 0.0035408440606958065 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"		
“aliceWin because aliceStrong”	listener	aliceWin	1	“[ { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.45138844935342276, 0.004940542058680825, 0.4588792899870252, 0.04430337536312064, 0.032816206581863454, 0.004131292595192789, 0.0035408440606958065 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"		
“aliceWin because !aliceLazy”	listener	aliceStrong	0.65	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.28839742737177904, 0.03174626982660373, 0.025815740010625636, 0.3291748237932495, 0.004722041799358446, 0.28839742737177804, 0.03174626982660384 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"		
“aliceWin because !aliceLazy”	listener	aliceLazy	0	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.28839742737177904, 0.03174626982660373, 0.025815740010625636, 0.3291748237932495, 0.004722041799358446, 0.28839742737177804, 0.03174626982660384 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"		
“aliceWin because !aliceLazy”	listener	bobStrong	0.35	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.28839742737177904, 0.03174626982660373, 0.025815740010625636, 0.3291748237932495, 0.004722041799358446, 0.28839742737177804, 0.03174626982660384 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"		
“aliceWin because !aliceLazy”	listener	bobLazy	0.09	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.28839742737177904, 0.03174626982660373, 0.025815740010625636, 0.3291748237932495, 0.004722041799358446, 0.28839742737177804, 0.03174626982660384 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"		
“aliceWin because !aliceLazy”	listener	aliceWin	1	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.28839742737177904, 0.03174626982660373, 0.025815740010625636, 0.3291748237932495, 0.004722041799358446, 0.28839742737177804, 0.03174626982660384 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"		
“aliceWin because !bobStrong”	listener	aliceStrong	0.49	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true } ],[ 0.4588792899870235, 0.044303375363120484, 0.003540844060695794, 0.45138844935342115, 0.004940542058680825, 0.03281620658186336, 0.004131292595192774 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"		
“aliceWin because !bobStrong”	listener	aliceLazy	0.04	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true } ],[ 0.4588792899870235, 0.044303375363120484, 0.003540844060695794, 0.45138844935342115, 0.004940542058680825, 0.03281620658186336, 0.004131292595192774 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"		
“aliceWin because !bobStrong”	listener	bobStrong	0	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true } ],[ 0.4588792899870235, 0.044303375363120484, 0.003540844060695794, 0.45138844935342115, 0.004940542058680825, 0.03281620658186336, 0.004131292595192774 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"		
“aliceWin because !bobStrong”	listener	bobLazy	0.06	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true } ],[ 0.4588792899870235, 0.044303375363120484, 0.003540844060695794, 0.45138844935342115, 0.004940542058680825, 0.03281620658186336, 0.004131292595192774 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"		
“aliceWin because !bobStrong”	listener	aliceWin	1	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true } ],[ 0.4588792899870235, 0.044303375363120484, 0.003540844060695794, 0.45138844935342115, 0.004940542058680825, 0.03281620658186336, 0.004131292595192774 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"		
