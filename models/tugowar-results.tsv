utterance	model	variable	probability	full model results	cost function	speaker alpha	listener alpha	alternative utterances function	most likely world(s)	summary
“aliceWin because bobLazy”	literal	aliceStrong	0.54	“[ { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true } ], [ 0.06267278890304598, 0.10241123157920051, 0.2416520422145825, 0.1379907204846502, 0.06267278890304598, 0.15094838570089178, 0.2416520422145826 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	"""[[aliceStrong, aliceTried, bobStrong, bobWeak, aliceWin], [aliceWeak, aliceTried, bobWeak, bobLazy, aliceWin]]"""	alice tried and has same strength as bob
“aliceWin because bobLazy”	literal	aliceLazy	0.23	“[ { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true } ], [ 0.06267278890304598, 0.10241123157920051, 0.2416520422145825, 0.1379907204846502, 0.06267278890304598, 0.15094838570089178, 0.2416520422145826 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	"""[[aliceStrong, aliceTried, bobStrong, bobWeak, aliceWin], [aliceWeak, aliceTried, bobWeak, bobLazy, aliceWin]]"""	alice tried and has same strength as bob
“aliceWin because bobLazy”	literal	bobStrong	0.46	“[ { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true } ], [ 0.06267278890304598, 0.10241123157920051, 0.2416520422145825, 0.1379907204846502, 0.06267278890304598, 0.15094838570089178, 0.2416520422145826 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	"""[[aliceStrong, aliceTried, bobStrong, bobWeak, aliceWin], [aliceWeak, aliceTried, bobWeak, bobLazy, aliceWin]]"""	alice tried and has same strength as bob
“aliceWin because bobLazy”	literal	bobLazy	1	“[ { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true } ], [ 0.06267278890304598, 0.10241123157920051, 0.2416520422145825, 0.1379907204846502, 0.06267278890304598, 0.15094838570089178, 0.2416520422145826 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	"""[[aliceStrong, aliceTried, bobStrong, bobWeak, aliceWin], [aliceWeak, aliceTried, bobWeak, bobLazy, aliceWin]]"""	alice tried and has same strength as bob
“aliceWin because bobLazy”	literal	aliceWin	1	“[ { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true } ], [ 0.06267278890304598, 0.10241123157920051, 0.2416520422145825, 0.1379907204846502, 0.06267278890304598, 0.15094838570089178, 0.2416520422145826 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	"""[[aliceStrong, aliceTried, bobStrong, bobWeak, aliceWin], [aliceWeak, aliceTried, bobWeak, bobLazy, aliceWin]]"""	alice tried and has same strength as bob
“aliceWin because bobLazy”	listener	aliceStrong	0.09	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.09386521468800263, 0.8122687689956913, 2.477587432670802e-7, 2.580030109297685e-7, 0.09386521468800163, 4.810780407095736e-8, 2.477587432670802e-7 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceWeak, aliceTried, bobStrong, bobLazy, aliceWin]]	alice weak but tried, bob strong
“aliceWin because bobLazy”	listener	aliceLazy	0	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.09386521468800263, 0.8122687689956913, 2.477587432670802e-7, 2.580030109297685e-7, 0.09386521468800163, 4.810780407095736e-8, 2.477587432670802e-7 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceWeak, aliceTried, bobStrong, bobLazy, aliceWin]]	alice weak but tried, bob strong
“aliceWin because bobLazy”	listener	bobStrong	0.91	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.09386521468800263, 0.8122687689956913, 2.477587432670802e-7, 2.580030109297685e-7, 0.09386521468800163, 4.810780407095736e-8, 2.477587432670802e-7 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceWeak, aliceTried, bobStrong, bobLazy, aliceWin]]	alice weak but tried, bob strong
“aliceWin because bobLazy”	listener	bobLazy	1	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.09386521468800263, 0.8122687689956913, 2.477587432670802e-7, 2.580030109297685e-7, 0.09386521468800163, 4.810780407095736e-8, 2.477587432670802e-7 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceWeak, aliceTried, bobStrong, bobLazy, aliceWin]]	alice weak but tried, bob strong
“aliceWin because bobLazy”	listener	aliceWin	1	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.09386521468800263, 0.8122687689956913, 2.477587432670802e-7, 2.580030109297685e-7, 0.09386521468800163, 4.810780407095736e-8, 2.477587432670802e-7 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceWeak, aliceTried, bobStrong, bobLazy, aliceWin]]	alice weak but tried, bob strong
“aliceWin because aliceStrong”	literal	aliceStrong	1	“[ { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true } ],[ 0.03771874474750841, 0.06312082728292233, 0.08993918820245615, 0.1494421681734141, 0.2179589977304644, 0.09096144361200574, 0.35085863025122876 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because aliceStrong”	literal	aliceLazy	0.19	“[ { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true } ],[ 0.03771874474750841, 0.06312082728292233, 0.08993918820245615, 0.1494421681734141, 0.2179589977304644, 0.09096144361200574, 0.35085863025122876 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because aliceStrong”	literal	bobStrong	0.41	“[ { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true } ],[ 0.03771874474750841, 0.06312082728292233, 0.08993918820245615, 0.1494421681734141, 0.2179589977304644, 0.09096144361200574, 0.35085863025122876 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because aliceStrong”	literal	bobLazy	0.34	“[ { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true } ],[ 0.03771874474750841, 0.06312082728292233, 0.08993918820245615, 0.1494421681734141, 0.2179589977304644, 0.09096144361200574, 0.35085863025122876 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because aliceStrong”	literal	aliceWin	1	“[ { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true } ],[ 0.03771874474750841, 0.06312082728292233, 0.08993918820245615, 0.1494421681734141, 0.2179589977304644, 0.09096144361200574, 0.35085863025122876 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because aliceStrong”	listener	aliceStrong	1	“[ { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.974016685258384, 8.941386143691799e-12, 0.02598265524348977, 6.594250741513612e-7, 6.291832967953059e-11, 3.1076807135161267e-13, 8.822217754629614e-13 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because aliceStrong”	listener	aliceLazy	0	“[ { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.974016685258384, 8.941386143691799e-12, 0.02598265524348977, 6.594250741513612e-7, 6.291832967953059e-11, 3.1076807135161267e-13, 8.822217754629614e-13 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because aliceStrong”	listener	bobStrong	0.03	“[ { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.974016685258384, 8.941386143691799e-12, 0.02598265524348977, 6.594250741513612e-7, 6.291832967953059e-11, 3.1076807135161267e-13, 8.822217754629614e-13 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because aliceStrong”	listener	bobLazy	0	“[ { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.974016685258384, 8.941386143691799e-12, 0.02598265524348977, 6.594250741513612e-7, 6.291832967953059e-11, 3.1076807135161267e-13, 8.822217754629614e-13 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because aliceStrong”	listener	aliceWin	1	“[ { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.974016685258384, 8.941386143691799e-12, 0.02598265524348977, 6.594250741513612e-7, 6.291832967953059e-11, 3.1076807135161267e-13, 8.822217754629614e-13 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because !aliceLazy”	literal	aliceStrong	0.64	“[ { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true } ],[ 0.11856624275789118, 0.16844964781114016, 0.0764478207563046, 0.27934706829819467, 0.07017332980743804, 0.11856624275789118, 0.16844964781114014 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceWeak, aliceTried, bobWeak, bobTried, aliceWin]]	both weak, both tried
“aliceWin because !aliceLazy”	literal	aliceLazy	0	“[ { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true } ],[ 0.11856624275789118, 0.16844964781114016, 0.0764478207563046, 0.27934706829819467, 0.07017332980743804, 0.11856624275789118, 0.16844964781114014 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceWeak, aliceTried, bobWeak, bobTried, aliceWin]]	both weak, both tried
“aliceWin because !aliceLazy”	literal	bobStrong	0.36	“[ { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true } ],[ 0.11856624275789118, 0.16844964781114016, 0.0764478207563046, 0.27934706829819467, 0.07017332980743804, 0.11856624275789118, 0.16844964781114014 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceWeak, aliceTried, bobWeak, bobTried, aliceWin]]	both weak, both tried
“aliceWin because !aliceLazy”	literal	bobLazy	0.38	“[ { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true } ],[ 0.11856624275789118, 0.16844964781114016, 0.0764478207563046, 0.27934706829819467, 0.07017332980743804, 0.11856624275789118, 0.16844964781114014 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceWeak, aliceTried, bobWeak, bobTried, aliceWin]]	both weak, both tried
“aliceWin because !aliceLazy”	literal	aliceWin	1	“[ { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true } ],[ 0.11856624275789118, 0.16844964781114016, 0.0764478207563046, 0.27934706829819467, 0.07017332980743804, 0.11856624275789118, 0.16844964781114014 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceWeak, aliceTried, bobWeak, bobTried, aliceWin]]	both weak, both tried
“aliceWin because !aliceLazy”	listener	aliceStrong	0.99	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.01236862432541054, 6.048088576410609e-7, 0.0000013587476895775925, 0.9752601829491507, 3.4622165574533773e-11, 0.012368624325410672, 6.048088576410609e-7 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because !aliceLazy”	listener	aliceLazy	0	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.01236862432541054, 6.048088576410609e-7, 0.0000013587476895775925, 0.9752601829491507, 3.4622165574533773e-11, 0.012368624325410672, 6.048088576410609e-7 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because !aliceLazy”	listener	bobStrong	0.01	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.01236862432541054, 6.048088576410609e-7, 0.0000013587476895775925, 0.9752601829491507, 3.4622165574533773e-11, 0.012368624325410672, 6.048088576410609e-7 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because !aliceLazy”	listener	bobLazy	0	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.01236862432541054, 6.048088576410609e-7, 0.0000013587476895775925, 0.9752601829491507, 3.4622165574533773e-11, 0.012368624325410672, 6.048088576410609e-7 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because !aliceLazy”	listener	aliceWin	1	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.01236862432541054, 6.048088576410609e-7, 0.0000013587476895775925, 0.9752601829491507, 3.4622165574533773e-11, 0.012368624325410672, 6.048088576410609e-7 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because !bobStrong”	literal	aliceStrong	0.59	“[ { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true } ],[ 0.06312082728292227, 0.08993918820245615, 0.09096144361200582, 0.35085863025122876, 0.03771874474750844, 0.14944216817341407, 0.21795899773046437 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because !bobStrong”	literal	aliceLazy	0.19	“[ { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true } ],[ 0.06312082728292227, 0.08993918820245615, 0.09096144361200582, 0.35085863025122876, 0.03771874474750844, 0.14944216817341407, 0.21795899773046437 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because !bobStrong”	literal	bobStrong	0	“[ { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true } ],[ 0.06312082728292227, 0.08993918820245615, 0.09096144361200582, 0.35085863025122876, 0.03771874474750844, 0.14944216817341407, 0.21795899773046437 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because !bobStrong”	literal	bobLazy	0.34	“[ { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true } ],[ 0.06312082728292227, 0.08993918820245615, 0.09096144361200582, 0.35085863025122876, 0.03771874474750844, 0.14944216817341407, 0.21795899773046437 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because !bobStrong”	literal	aliceWin	1	“[ { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true } ],[ 0.06312082728292227, 0.08993918820245615, 0.09096144361200582, 0.35085863025122876, 0.03771874474750844, 0.14944216817341407, 0.21795899773046437 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because !bobStrong”	listener	aliceStrong	0.97	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true } ][ 0.02598265524348922, 6.594250741513565e-7, 8.822217754629928e-13, 0.974016685258384, 8.941386143691926e-12, 6.291832967953059e-11, 3.1076807135160606e-13 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because !bobStrong”	listener	aliceLazy	0	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true } ][ 0.02598265524348922, 6.594250741513565e-7, 8.822217754629928e-13, 0.974016685258384, 8.941386143691926e-12, 6.291832967953059e-11, 3.1076807135160606e-13 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because !bobStrong”	listener	bobStrong	0	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true } ][ 0.02598265524348922, 6.594250741513565e-7, 8.822217754629928e-13, 0.974016685258384, 8.941386143691926e-12, 6.291832967953059e-11, 3.1076807135160606e-13 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because !bobStrong”	listener	bobLazy	0	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true } ][ 0.02598265524348922, 6.594250741513565e-7, 8.822217754629928e-13, 0.974016685258384, 8.941386143691926e-12, 6.291832967953059e-11, 3.1076807135160606e-13 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because !bobStrong”	listener	aliceWin	1	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true } ][ 0.02598265524348922, 6.594250741513565e-7, 8.822217754629928e-13, 0.974016685258384, 8.941386143691926e-12, 6.291832967953059e-11, 3.1076807135160606e-13 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	5	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, but alice was stronger
“aliceWin because bobLazy”	listener	aliceStrong	0.37	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.2920621195550606, 0.31102979094924904, 0.026740382624249808, 0.023669504074406336, 0.2920621195550606, 0.0276957006177233, 0.026740382624249995 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobStrong, bobLazy, aliceWin],[aliceWeak, aliceTried, bobWeak, bobLazy, aliceWin]]	alice tried and has same strength as bob
“aliceWin because bobLazy”	listener	aliceLazy	0.08	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.2920621195550606, 0.31102979094924904, 0.026740382624249808, 0.023669504074406336, 0.2920621195550606, 0.0276957006177233, 0.026740382624249995 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobStrong, bobLazy, aliceWin],[aliceWeak, aliceTried, bobWeak, bobLazy, aliceWin]]	alice tried and has same strength as bob
“aliceWin because bobLazy”	listener	bobStrong	0.63	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.2920621195550606, 0.31102979094924904, 0.026740382624249808, 0.023669504074406336, 0.2920621195550606, 0.0276957006177233, 0.026740382624249995 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobStrong, bobLazy, aliceWin],[aliceWeak, aliceTried, bobWeak, bobLazy, aliceWin]]	alice tried and has same strength as bob
“aliceWin because bobLazy”	listener	bobLazy	1	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.2920621195550606, 0.31102979094924904, 0.026740382624249808, 0.023669504074406336, 0.2920621195550606, 0.0276957006177233, 0.026740382624249995 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobStrong, bobLazy, aliceWin],[aliceWeak, aliceTried, bobWeak, bobLazy, aliceWin]]	alice tried and has same strength as bob
“aliceWin because bobLazy”	listener	aliceWin	1	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.2920621195550606, 0.31102979094924904, 0.026740382624249808, 0.023669504074406336, 0.2920621195550606, 0.0276957006177233, 0.026740382624249995 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobStrong, bobLazy, aliceWin],[aliceWeak, aliceTried, bobWeak, bobLazy, aliceWin]]	alice tried and has same strength as bob
“aliceWin because aliceStrong”	listener	aliceStrong	1	“[ { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.45138844935342276, 0.004940542058680825, 0.4588792899870252, 0.04430337536312064, 0.032816206581863454, 0.004131292595192789, 0.0035408440606958065 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobStrong, bobTried, aliceWin], [aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, alice was strong, who knows about bob's strength
“aliceWin because aliceStrong”	listener	aliceLazy	0.04	“[ { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.45138844935342276, 0.004940542058680825, 0.4588792899870252, 0.04430337536312064, 0.032816206581863454, 0.004131292595192789, 0.0035408440606958065 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobStrong, bobTried, aliceWin], [aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, alice was strong, who knows about bob's strength
“aliceWin because aliceStrong”	listener	bobStrong	0.51	“[ { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.45138844935342276, 0.004940542058680825, 0.4588792899870252, 0.04430337536312064, 0.032816206581863454, 0.004131292595192789, 0.0035408440606958065 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobStrong, bobTried, aliceWin], [aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, alice was strong, who knows about bob's strength
“aliceWin because aliceStrong”	listener	bobLazy	0.06	“[ { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.45138844935342276, 0.004940542058680825, 0.4588792899870252, 0.04430337536312064, 0.032816206581863454, 0.004131292595192789, 0.0035408440606958065 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobStrong, bobTried, aliceWin], [aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, alice was strong, who knows about bob's strength
“aliceWin because aliceStrong”	listener	aliceWin	1	“[ { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.45138844935342276, 0.004940542058680825, 0.4588792899870252, 0.04430337536312064, 0.032816206581863454, 0.004131292595192789, 0.0035408440606958065 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobStrong, bobTried, aliceWin], [aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried, alice was strong, who knows about bob's strength
“aliceWin because !aliceLazy”	listener	aliceStrong	0.65	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.28839742737177904, 0.03174626982660373, 0.025815740010625636, 0.3291748237932495, 0.004722041799358446, 0.28839742737177804, 0.03174626982660384 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin], [aliceWeak, aliceTried, bobWeak, bobTried, aliceWin], [aliceStrong, aliceTried, bobStrong, bobTried]]	alice at least as strong as bob. both tried.
“aliceWin because !aliceLazy”	listener	aliceLazy	0	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.28839742737177904, 0.03174626982660373, 0.025815740010625636, 0.3291748237932495, 0.004722041799358446, 0.28839742737177804, 0.03174626982660384 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin], [aliceWeak, aliceTried, bobWeak, bobTried, aliceWin], [aliceStrong, aliceTried, bobStrong, bobTried]]	alice at least as strong as bob. both tried.
“aliceWin because !aliceLazy”	listener	bobStrong	0.35	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.28839742737177904, 0.03174626982660373, 0.025815740010625636, 0.3291748237932495, 0.004722041799358446, 0.28839742737177804, 0.03174626982660384 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin], [aliceWeak, aliceTried, bobWeak, bobTried, aliceWin], [aliceStrong, aliceTried, bobStrong, bobTried]]	alice at least as strong as bob. both tried.
“aliceWin because !aliceLazy”	listener	bobLazy	0.09	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.28839742737177904, 0.03174626982660373, 0.025815740010625636, 0.3291748237932495, 0.004722041799358446, 0.28839742737177804, 0.03174626982660384 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin], [aliceWeak, aliceTried, bobWeak, bobTried, aliceWin], [aliceStrong, aliceTried, bobStrong, bobTried]]	alice at least as strong as bob. both tried.
“aliceWin because !aliceLazy”	listener	aliceWin	1	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.28839742737177904, 0.03174626982660373, 0.025815740010625636, 0.3291748237932495, 0.004722041799358446, 0.28839742737177804, 0.03174626982660384 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin], [aliceWeak, aliceTried, bobWeak, bobTried, aliceWin], [aliceStrong, aliceTried, bobStrong, bobTried]]	alice at least as strong as bob. both tried.
“aliceWin because !bobStrong”	listener	aliceStrong	0.49	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true } ],[ 0.4588792899870235, 0.044303375363120484, 0.003540844060695794, 0.45138844935342115, 0.004940542058680825, 0.03281620658186336, 0.004131292595192774 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceWeak, aliceTried, bobWeak, bobTried], [aliceStrong, aliceTried, bobWeak, bobTried]]	alice and bob tried
“aliceWin because !bobStrong”	listener	aliceLazy	0.04	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true } ],[ 0.4588792899870235, 0.044303375363120484, 0.003540844060695794, 0.45138844935342115, 0.004940542058680825, 0.03281620658186336, 0.004131292595192774 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceWeak, aliceTried, bobWeak, bobTried], [aliceStrong, aliceTried, bobWeak, bobTried]]	alice and bob tried
“aliceWin because !bobStrong”	listener	bobStrong	0	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true } ],[ 0.4588792899870235, 0.044303375363120484, 0.003540844060695794, 0.45138844935342115, 0.004940542058680825, 0.03281620658186336, 0.004131292595192774 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceWeak, aliceTried, bobWeak, bobTried], [aliceStrong, aliceTried, bobWeak, bobTried]]	alice and bob tried
“aliceWin because !bobStrong”	listener	bobLazy	0.06	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true } ],[ 0.4588792899870235, 0.044303375363120484, 0.003540844060695794, 0.45138844935342115, 0.004940542058680825, 0.03281620658186336, 0.004131292595192774 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceWeak, aliceTried, bobWeak, bobTried], [aliceStrong, aliceTried, bobWeak, bobTried]]	alice and bob tried
“aliceWin because !bobStrong”	listener	aliceWin	1	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true } ],[ 0.4588792899870235, 0.044303375363120484, 0.003540844060695794, 0.45138844935342115, 0.004940542058680825, 0.03281620658186336, 0.004131292595192774 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(lst) {return lst[0] + "" because "" + lst[1];}, filter( function(lst) { return lst[0] != lst[1]; }, propositionPairs ) ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceWeak, aliceTried, bobWeak, bobTried], [aliceStrong, aliceTried, bobWeak, bobTried]]	alice and bob tried
“bobLazy & aliceWin”	listener	aliceStrong	0.65	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.24931873828778756, 0.08547503212770645, 0.011140886685177513, 0.3610098325787716, 0.24931873828778756, 0.03259588534759284, 0.011140886685177513 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(p) {return ""aliceWin because "" + p;}, simplePropositions ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobLazy, aliceWin], [aliceWeak, aliceTried, bobWeak, bobLazy], [aliceStrong, aliceTried, bobStrong, bobLazy]]	alice is at least as strong as bob and she tried but bob did not
“bobLazy & aliceWin”	listener	aliceLazy	0.05	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.24931873828778756, 0.08547503212770645, 0.011140886685177513, 0.3610098325787716, 0.24931873828778756, 0.03259588534759284, 0.011140886685177513 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(p) {return ""aliceWin because "" + p;}, simplePropositions ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobLazy, aliceWin], [aliceWeak, aliceTried, bobWeak, bobLazy], [aliceStrong, aliceTried, bobStrong, bobLazy]]	alice is at least as strong as bob and she tried but bob did not
“bobLazy & aliceWin”	listener	bobStrong	0.35	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.24931873828778756, 0.08547503212770645, 0.011140886685177513, 0.3610098325787716, 0.24931873828778756, 0.03259588534759284, 0.011140886685177513 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(p) {return ""aliceWin because "" + p;}, simplePropositions ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobLazy, aliceWin], [aliceWeak, aliceTried, bobWeak, bobLazy], [aliceStrong, aliceTried, bobStrong, bobLazy]]	alice is at least as strong as bob and she tried but bob did not
“bobLazy & aliceWin”	listener	bobLazy	1	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.24931873828778756, 0.08547503212770645, 0.011140886685177513, 0.3610098325787716, 0.24931873828778756, 0.03259588534759284, 0.011140886685177513 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(p) {return ""aliceWin because "" + p;}, simplePropositions ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobLazy, aliceWin], [aliceWeak, aliceTried, bobWeak, bobLazy], [aliceStrong, aliceTried, bobStrong, bobLazy]]	alice is at least as strong as bob and she tried but bob did not
“bobLazy & aliceWin”	listener	aliceWin	1	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.24931873828778756, 0.08547503212770645, 0.011140886685177513, 0.3610098325787716, 0.24931873828778756, 0.03259588534759284, 0.011140886685177513 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(p) {return ""aliceWin because "" + p;}, simplePropositions ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobLazy, aliceWin], [aliceWeak, aliceTried, bobWeak, bobLazy], [aliceStrong, aliceTried, bobStrong, bobLazy]]	alice is at least as strong as bob and she tried but bob did not
“aliceWin because bobLazy”	listener	aliceStrong	0.38	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.2867822775637232, 0.2992103800688034, 0.033280803820726845, 0.025212358981429588, 0.2867822775637221, 0.03545109818086744, 0.033280803820726845 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(p) {return ""aliceWin because "" + p;}, simplePropositions ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceWeak, aliceTried, bobStrong, bobLazy, aliceWin], [aliceWeak, aliceTried, bobWeak, bobLazy, aliceWin], [aliceStrong, aliceTried, bobStrong, bobLazy, aliceWin]]	 bob was at least as strong as alice and alice tried
“aliceWin because bobLazy”	listener	aliceLazy	0.1	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.2867822775637232, 0.2992103800688034, 0.033280803820726845, 0.025212358981429588, 0.2867822775637221, 0.03545109818086744, 0.033280803820726845 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(p) {return ""aliceWin because "" + p;}, simplePropositions ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceWeak, aliceTried, bobStrong, bobLazy, aliceWin], [aliceWeak, aliceTried, bobWeak, bobLazy, aliceWin], [aliceStrong, aliceTried, bobStrong, bobLazy, aliceWin]]	 bob was at least as strong as alice and alice tried
“aliceWin because bobLazy”	listener	bobStrong	0.62	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.2867822775637232, 0.2992103800688034, 0.033280803820726845, 0.025212358981429588, 0.2867822775637221, 0.03545109818086744, 0.033280803820726845 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(p) {return ""aliceWin because "" + p;}, simplePropositions ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceWeak, aliceTried, bobStrong, bobLazy, aliceWin], [aliceWeak, aliceTried, bobWeak, bobLazy, aliceWin], [aliceStrong, aliceTried, bobStrong, bobLazy, aliceWin]]	 bob was at least as strong as alice and alice tried
“aliceWin because bobLazy”	listener	bobLazy	1	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.2867822775637232, 0.2992103800688034, 0.033280803820726845, 0.025212358981429588, 0.2867822775637221, 0.03545109818086744, 0.033280803820726845 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(p) {return ""aliceWin because "" + p;}, simplePropositions ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceWeak, aliceTried, bobStrong, bobLazy, aliceWin], [aliceWeak, aliceTried, bobWeak, bobLazy, aliceWin], [aliceStrong, aliceTried, bobStrong, bobLazy, aliceWin]]	 bob was at least as strong as alice and alice tried
“aliceWin because bobLazy”	listener	aliceWin	1	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.2867822775637232, 0.2992103800688034, 0.033280803820726845, 0.025212358981429588, 0.2867822775637221, 0.03545109818086744, 0.033280803820726845 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(p) {return ""aliceWin because "" + p;}, simplePropositions ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceWeak, aliceTried, bobStrong, bobLazy, aliceWin], [aliceWeak, aliceTried, bobWeak, bobLazy, aliceWin], [aliceStrong, aliceTried, bobStrong, bobLazy, aliceWin]]	 bob was at least as strong as alice and alice tried
aliceWin & aliceStrong	listener	aliceStrong	1	“[ { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.578344128402553, 0.1117504151379948, 0.19684124323925964, 0.07717649213685063, 0.02234902493054483, 0.010090040189110921, 0.003448655963691231 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(p) {return ""aliceWin because "" + p;}, simplePropositions ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	bob was weak and tried
aliceWin & aliceStrong	listener	aliceLazy	0.04	“[ { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.578344128402553, 0.1117504151379948, 0.19684124323925964, 0.07717649213685063, 0.02234902493054483, 0.010090040189110921, 0.003448655963691231 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(p) {return ""aliceWin because "" + p;}, simplePropositions ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	bob was weak and tried
aliceWin & aliceStrong	listener	bobStrong	0.28	“[ { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.578344128402553, 0.1117504151379948, 0.19684124323925964, 0.07717649213685063, 0.02234902493054483, 0.010090040189110921, 0.003448655963691231 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(p) {return ""aliceWin because "" + p;}, simplePropositions ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	bob was weak and tried
aliceWin & aliceStrong	listener	bobLazy	0.2	“[ { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.578344128402553, 0.1117504151379948, 0.19684124323925964, 0.07717649213685063, 0.02234902493054483, 0.010090040189110921, 0.003448655963691231 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(p) {return ""aliceWin because "" + p;}, simplePropositions ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	bob was weak and tried
aliceWin & aliceStrong	listener	aliceWin	1	“[ { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.578344128402553, 0.1117504151379948, 0.19684124323925964, 0.07717649213685063, 0.02234902493054483, 0.010090040189110921, 0.003448655963691231 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(p) {return ""aliceWin because "" + p;}, simplePropositions ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	bob was weak and tried
aliceWin because aliceStrong	listener	aliceStrong	1	“[ { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.43933841894691117, 0.006876569347508928, 0.44268226429780616, 0.05684428326244282, 0.04159003973939297, 0.006909970518182433, 0.005758453887755274 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(p) {return ""aliceWin because "" + p;}, simplePropositions ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	 [[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin], [aliceStrong, aliceTried, bobStrong, bobTried, aliceWin]]	bob tried, but so did alice and she was strong so it really doesn't matter what bob did or how strong he was
aliceWin because aliceStrong	listener	aliceLazy	0.05	“[ { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.43933841894691117, 0.006876569347508928, 0.44268226429780616, 0.05684428326244282, 0.04159003973939297, 0.006909970518182433, 0.005758453887755274 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(p) {return ""aliceWin because "" + p;}, simplePropositions ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	 [[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin], [aliceStrong, aliceTried, bobStrong, bobTried, aliceWin]]	bob tried, but so did alice and she was strong so it really doesn't matter what bob did or how strong he was
aliceWin because aliceStrong	listener	bobStrong	0.51	“[ { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.43933841894691117, 0.006876569347508928, 0.44268226429780616, 0.05684428326244282, 0.04159003973939297, 0.006909970518182433, 0.005758453887755274 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(p) {return ""aliceWin because "" + p;}, simplePropositions ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	 [[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin], [aliceStrong, aliceTried, bobStrong, bobTried, aliceWin]]	bob tried, but so did alice and she was strong so it really doesn't matter what bob did or how strong he was
aliceWin because aliceStrong	listener	bobLazy	0.08	“[ { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.43933841894691117, 0.006876569347508928, 0.44268226429780616, 0.05684428326244282, 0.04159003973939297, 0.006909970518182433, 0.005758453887755274 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(p) {return ""aliceWin because "" + p;}, simplePropositions ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	 [[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin], [aliceStrong, aliceTried, bobStrong, bobTried, aliceWin]]	bob tried, but so did alice and she was strong so it really doesn't matter what bob did or how strong he was
aliceWin because aliceStrong	listener	aliceWin	1	“[ { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.43933841894691117, 0.006876569347508928, 0.44268226429780616, 0.05684428326244282, 0.04159003973939297, 0.006909970518182433, 0.005758453887755274 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(p) {return ""aliceWin because "" + p;}, simplePropositions ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	 [[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin], [aliceStrong, aliceTried, bobStrong, bobTried, aliceWin]]	bob tried, but so did alice and she was strong so it really doesn't matter what bob did or how strong he was
aliceWin & !aliceLazy	listener	aliceStrong	0.76	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.15565632732678183, 0.061028924245233866, 0.02092281268710499, 0.4573377076709852, 0.08836897649787895, 0.15565632732678183, 0.06102892424523408 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(p) {return ""aliceWin because "" + p;}, simplePropositions ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	both tried, bob weak.
aliceWin & !aliceLazy	listener	aliceLazy	0	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.15565632732678183, 0.061028924245233866, 0.02092281268710499, 0.4573377076709852, 0.08836897649787895, 0.15565632732678183, 0.06102892424523408 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(p) {return ""aliceWin because "" + p;}, simplePropositions ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	both tried, bob weak.
aliceWin & !aliceLazy	listener	bobStrong	0.24	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.15565632732678183, 0.061028924245233866, 0.02092281268710499, 0.4573377076709852, 0.08836897649787895, 0.15565632732678183, 0.06102892424523408 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(p) {return ""aliceWin because "" + p;}, simplePropositions ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	both tried, bob weak.
aliceWin & !aliceLazy	listener	bobLazy	0.23	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.15565632732678183, 0.061028924245233866, 0.02092281268710499, 0.4573377076709852, 0.08836897649787895, 0.15565632732678183, 0.06102892424523408 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(p) {return ""aliceWin because "" + p;}, simplePropositions ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	both tried, bob weak.
aliceWin & !aliceLazy	listener	aliceWin	1	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.15565632732678183, 0.061028924245233866, 0.02092281268710499, 0.4573377076709852, 0.08836897649787895, 0.15565632732678183, 0.06102892424523408 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(p) {return ""aliceWin because "" + p;}, simplePropositions ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	both tried, bob weak.
aliceWin because !aliceLazy	listener	aliceStrong	0.65	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.2789677039655293, 0.0408424291058403, 0.0325387623342179, 0.3212508118930785, 0.0065901596299668816, 0.2789677039655293, 0.040842429105840586 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(p) {return ""aliceWin because "" + p;}, simplePropositions ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin],[aliceStrong, aliceTried, bobStrong, bobTried, aliceWin],[aliceWeak, aliceTried, bobWeak, bobTried, aliceWin]]	alice at least as strong as bob. both tried.
aliceWin because !aliceLazy	listener	aliceLazy	0	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.2789677039655293, 0.0408424291058403, 0.0325387623342179, 0.3212508118930785, 0.0065901596299668816, 0.2789677039655293, 0.040842429105840586 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(p) {return ""aliceWin because "" + p;}, simplePropositions ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin],[aliceStrong, aliceTried, bobStrong, bobTried, aliceWin],[aliceWeak, aliceTried, bobWeak, bobTried, aliceWin]]	alice at least as strong as bob. both tried.
aliceWin because !aliceLazy	listener	bobStrong	0.35	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.2789677039655293, 0.0408424291058403, 0.0325387623342179, 0.3212508118930785, 0.0065901596299668816, 0.2789677039655293, 0.040842429105840586 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(p) {return ""aliceWin because "" + p;}, simplePropositions ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin],[aliceStrong, aliceTried, bobStrong, bobTried, aliceWin],[aliceWeak, aliceTried, bobWeak, bobTried, aliceWin]]	alice at least as strong as bob. both tried.
aliceWin because !aliceLazy	listener	bobLazy	0.12	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.2789677039655293, 0.0408424291058403, 0.0325387623342179, 0.3212508118930785, 0.0065901596299668816, 0.2789677039655293, 0.040842429105840586 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(p) {return ""aliceWin because "" + p;}, simplePropositions ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin],[aliceStrong, aliceTried, bobStrong, bobTried, aliceWin],[aliceWeak, aliceTried, bobWeak, bobTried, aliceWin]]	alice at least as strong as bob. both tried.
aliceWin because !aliceLazy	listener	aliceWin	1	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.2789677039655293, 0.0408424291058403, 0.0325387623342179, 0.3212508118930785, 0.0065901596299668816, 0.2789677039655293, 0.040842429105840586 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(p) {return ""aliceWin because "" + p;}, simplePropositions ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin],[aliceStrong, aliceTried, bobStrong, bobTried, aliceWin],[aliceWeak, aliceTried, bobWeak, bobTried, aliceWin]]	alice at least as strong as bob. both tried.
aliceWin & !bobStrong	listener	aliceStrong	0.72	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true } ],[ 0.19684124323925895, 0.07717649213685035, 0.0034486559636912155, 0.578344128402551, 0.1117504151379944, 0.02234902493054475, 0.010090040189110885 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(p) {return ""aliceWin because "" + p;}, simplePropositions ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	both tried, alice stronger than bob.
aliceWin & !bobStrong	listener	aliceLazy	0.04	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true } ],[ 0.19684124323925895, 0.07717649213685035, 0.0034486559636912155, 0.578344128402551, 0.1117504151379944, 0.02234902493054475, 0.010090040189110885 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(p) {return ""aliceWin because "" + p;}, simplePropositions ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	both tried, alice stronger than bob.
aliceWin & !bobStrong	listener	bobStrong	0	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true } ],[ 0.19684124323925895, 0.07717649213685035, 0.0034486559636912155, 0.578344128402551, 0.1117504151379944, 0.02234902493054475, 0.010090040189110885 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(p) {return ""aliceWin because "" + p;}, simplePropositions ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	both tried, alice stronger than bob.
aliceWin & !bobStrong	listener	bobLazy	0.2	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true } ],[ 0.19684124323925895, 0.07717649213685035, 0.0034486559636912155, 0.578344128402551, 0.1117504151379944, 0.02234902493054475, 0.010090040189110885 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(p) {return ""aliceWin because "" + p;}, simplePropositions ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	both tried, alice stronger than bob.
aliceWin & !bobStrong	listener	aliceWin	1	“[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true } ],[ 0.19684124323925895, 0.07717649213685035, 0.0034486559636912155, 0.578344128402551, 0.1117504151379944, 0.02234902493054475, 0.010090040189110885 ]”	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(p) {return ""aliceWin because "" + p;}, simplePropositions ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	[[aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	both tried, alice stronger than bob.
aliceWin because !bobStrong	listener	aliceStrong	0.49	[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true } ][ 0.44268226429780616, 0.05684428326244282, 0.005758453887755274, 0.43933841894691117, 0.006876569347508928, 0.04159003973939297, 0.006909970518182433 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(p) {return ""aliceWin because "" + p;}, simplePropositions ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	 [[aliceWeak, aliceTried, bobWeak, bobTried, aliceWin], [aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried. not sure about alice's strength.
aliceWin because !bobStrong	listener	aliceLazy	0.05	[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true } ][ 0.44268226429780616, 0.05684428326244282, 0.005758453887755274, 0.43933841894691117, 0.006876569347508928, 0.04159003973939297, 0.006909970518182433 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(p) {return ""aliceWin because "" + p;}, simplePropositions ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	 [[aliceWeak, aliceTried, bobWeak, bobTried, aliceWin], [aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried. not sure about alice's strength.
aliceWin because !bobStrong	listener	bobStrong	0	[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true } ][ 0.44268226429780616, 0.05684428326244282, 0.005758453887755274, 0.43933841894691117, 0.006876569347508928, 0.04159003973939297, 0.006909970518182433 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(p) {return ""aliceWin because "" + p;}, simplePropositions ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	 [[aliceWeak, aliceTried, bobWeak, bobTried, aliceWin], [aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried. not sure about alice's strength.
aliceWin because !bobStrong	listener	bobLazy	0.08	[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true } ][ 0.44268226429780616, 0.05684428326244282, 0.005758453887755274, 0.43933841894691117, 0.006876569347508928, 0.04159003973939297, 0.006909970518182433 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(p) {return ""aliceWin because "" + p;}, simplePropositions ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	 [[aliceWeak, aliceTried, bobWeak, bobTried, aliceWin], [aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried. not sure about alice's strength.
aliceWin because !bobStrong	listener	aliceWin	1	[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true } ][ 0.44268226429780616, 0.05684428326244282, 0.005758453887755274, 0.43933841894691117, 0.006876569347508928, 0.04159003973939297, 0.006909970518182433 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"“var getAlternativeUtterances = function(basePropositions) { var nothing = [""nothing""]; var negPropositions = map(function(p) {return ""!"" + p;}, basePropositions); var simplePropositions = negPropositions.concat(basePropositions); var propositionPairs = [].concat.apply( [], map( function(a) { return map( function(b) { return [a,b]; }, simplePropositions ); }, simplePropositions ) ); // because pairs for everything in both directions var becausePropositions = map( function(p) {return ""aliceWin because "" + p;}, simplePropositions ); var conjunctionPropositions = map( function(lst) {return lst[0] + "" & "" + lst[1];}, filter( function(lst) { var notSame = lst[0] != lst[1]; var ordered = lst[0] > lst[1]; return notSame & ordered; }, propositionPairs ) ); return nothing.concat( simplePropositions ).concat( becausePropositions ).concat( conjunctionPropositions ); };”"	 [[aliceWeak, aliceTried, bobWeak, bobTried, aliceWin], [aliceStrong, aliceTried, bobWeak, bobTried, aliceWin]]	alice and bob tried. not sure about alice's strength.
aliceWin & bobLazy	listener	aliceStrong	0.59	[ { aliceStrong: false,  aliceLazy: false,  bobStrong: false,  bobLazy: true,  aliceWin: true }, { aliceStrong: false,  aliceLazy: false,  bobStrong: true,  bobLazy: true,  aliceWin: true }, { aliceStrong: false,  aliceLazy: true,  bobStrong: false,  bobLazy: true,  aliceWin: true }, { aliceStrong: true,  aliceLazy: false,  bobStrong: false,  bobLazy: true,  aliceWin: true }, { aliceStrong: true,  aliceLazy: false,  bobStrong: true,  bobLazy: true,  aliceWin: true }, { aliceStrong: true,  aliceLazy: true,  bobStrong: false,  bobLazy: true,  aliceWin: true }, { aliceStrong: true,  aliceLazy: true,  bobStrong: true,  bobLazy: true,  aliceWin: true } ][ 0.2528864225333128, 0.12644321126665706, 0.0287243802833511, 0.2528864225333128, 0.2528864225333128, 0.057448760566702096, 0.0287243802833511 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"""“var getUtterancePrior = function(utterance) {NEWLINE var basePropositions = ['aliceStrong', 'aliceLazy', 'bobStrong', 'bobLazy', 'aliceWin'];NEWLINE var getAlternativeUtterances = function(utterance) {NEWLINE var negPropositions = map(function(p) {return """"!"""" + p;}, basePropositions);NEWLINE var simplePropositions = negPropositions.concat(basePropositions);NEWLINE return [utterance, """"nothing""""].concat(NEWLINE  simplePropositionsNEWLINE );NEWLINE };NEWLINE var utterances = getAlternativeUtterances(utterance);NEWLINE var costs = map(function(utterance) {NEWLINE if (utterance == """"nothing"""") {NEWLINE  return 0;NEWLINE } else {NEWLINE  var words = utterance.split("""" """");NEWLINE  var chars = utterance.split("""""""");NEWLINE  var negs = filter(function(x) {return x == """"!"""";}, chars);NEWLINE  return words.length;NEWLINE }NEWLINE }, utterances);NEWLINE return function() {NEWLINE var probabilities = map(function(x) {return Math.exp(-x);}, costs);NEWLINE return utterances[discrete(probabilities)];NEWLINE };NEWLINE};”""NEWLINE"		
aliceWin & bobLazy	listener	aliceLazy	0.11	[ { aliceStrong: false,  aliceLazy: false,  bobStrong: false,  bobLazy: true,  aliceWin: true }, { aliceStrong: false,  aliceLazy: false,  bobStrong: true,  bobLazy: true,  aliceWin: true }, { aliceStrong: false,  aliceLazy: true,  bobStrong: false,  bobLazy: true,  aliceWin: true }, { aliceStrong: true,  aliceLazy: false,  bobStrong: false,  bobLazy: true,  aliceWin: true }, { aliceStrong: true,  aliceLazy: false,  bobStrong: true,  bobLazy: true,  aliceWin: true }, { aliceStrong: true,  aliceLazy: true,  bobStrong: false,  bobLazy: true,  aliceWin: true }, { aliceStrong: true,  aliceLazy: true,  bobStrong: true,  bobLazy: true,  aliceWin: true } ][ 0.2528864225333128, 0.12644321126665706, 0.0287243802833511, 0.2528864225333128, 0.2528864225333128, 0.057448760566702096, 0.0287243802833511 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"""“var getUtterancePrior = function(utterance) {NEWLINE var basePropositions = ['aliceStrong', 'aliceLazy', 'bobStrong', 'bobLazy', 'aliceWin'];NEWLINE var getAlternativeUtterances = function(utterance) {NEWLINE var negPropositions = map(function(p) {return """"!"""" + p;}, basePropositions);NEWLINE var simplePropositions = negPropositions.concat(basePropositions);NEWLINE return [utterance, """"nothing""""].concat(NEWLINE  simplePropositionsNEWLINE );NEWLINE };NEWLINE var utterances = getAlternativeUtterances(utterance);NEWLINE var costs = map(function(utterance) {NEWLINE if (utterance == """"nothing"""") {NEWLINE  return 0;NEWLINE } else {NEWLINE  var words = utterance.split("""" """");NEWLINE  var chars = utterance.split("""""""");NEWLINE  var negs = filter(function(x) {return x == """"!"""";}, chars);NEWLINE  return words.length;NEWLINE }NEWLINE }, utterances);NEWLINE return function() {NEWLINE var probabilities = map(function(x) {return Math.exp(-x);}, costs);NEWLINE return utterances[discrete(probabilities)];NEWLINE };NEWLINE};”""NEWLINE"		
aliceWin & bobLazy	listener	bobStrong	0.41	[ { aliceStrong: false,  aliceLazy: false,  bobStrong: false,  bobLazy: true,  aliceWin: true }, { aliceStrong: false,  aliceLazy: false,  bobStrong: true,  bobLazy: true,  aliceWin: true }, { aliceStrong: false,  aliceLazy: true,  bobStrong: false,  bobLazy: true,  aliceWin: true }, { aliceStrong: true,  aliceLazy: false,  bobStrong: false,  bobLazy: true,  aliceWin: true }, { aliceStrong: true,  aliceLazy: false,  bobStrong: true,  bobLazy: true,  aliceWin: true }, { aliceStrong: true,  aliceLazy: true,  bobStrong: false,  bobLazy: true,  aliceWin: true }, { aliceStrong: true,  aliceLazy: true,  bobStrong: true,  bobLazy: true,  aliceWin: true } ][ 0.2528864225333128, 0.12644321126665706, 0.0287243802833511, 0.2528864225333128, 0.2528864225333128, 0.057448760566702096, 0.0287243802833511 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"""“var getUtterancePrior = function(utterance) {NEWLINE var basePropositions = ['aliceStrong', 'aliceLazy', 'bobStrong', 'bobLazy', 'aliceWin'];NEWLINE var getAlternativeUtterances = function(utterance) {NEWLINE var negPropositions = map(function(p) {return """"!"""" + p;}, basePropositions);NEWLINE var simplePropositions = negPropositions.concat(basePropositions);NEWLINE return [utterance, """"nothing""""].concat(NEWLINE  simplePropositionsNEWLINE );NEWLINE };NEWLINE var utterances = getAlternativeUtterances(utterance);NEWLINE var costs = map(function(utterance) {NEWLINE if (utterance == """"nothing"""") {NEWLINE  return 0;NEWLINE } else {NEWLINE  var words = utterance.split("""" """");NEWLINE  var chars = utterance.split("""""""");NEWLINE  var negs = filter(function(x) {return x == """"!"""";}, chars);NEWLINE  return words.length;NEWLINE }NEWLINE }, utterances);NEWLINE return function() {NEWLINE var probabilities = map(function(x) {return Math.exp(-x);}, costs);NEWLINE return utterances[discrete(probabilities)];NEWLINE };NEWLINE};”""NEWLINE"		
aliceWin & bobLazy	listener	bobLazy	1	[ { aliceStrong: false,  aliceLazy: false,  bobStrong: false,  bobLazy: true,  aliceWin: true }, { aliceStrong: false,  aliceLazy: false,  bobStrong: true,  bobLazy: true,  aliceWin: true }, { aliceStrong: false,  aliceLazy: true,  bobStrong: false,  bobLazy: true,  aliceWin: true }, { aliceStrong: true,  aliceLazy: false,  bobStrong: false,  bobLazy: true,  aliceWin: true }, { aliceStrong: true,  aliceLazy: false,  bobStrong: true,  bobLazy: true,  aliceWin: true }, { aliceStrong: true,  aliceLazy: true,  bobStrong: false,  bobLazy: true,  aliceWin: true }, { aliceStrong: true,  aliceLazy: true,  bobStrong: true,  bobLazy: true,  aliceWin: true } ][ 0.2528864225333128, 0.12644321126665706, 0.0287243802833511, 0.2528864225333128, 0.2528864225333128, 0.057448760566702096, 0.0287243802833511 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"""“var getUtterancePrior = function(utterance) {NEWLINE var basePropositions = ['aliceStrong', 'aliceLazy', 'bobStrong', 'bobLazy', 'aliceWin'];NEWLINE var getAlternativeUtterances = function(utterance) {NEWLINE var negPropositions = map(function(p) {return """"!"""" + p;}, basePropositions);NEWLINE var simplePropositions = negPropositions.concat(basePropositions);NEWLINE return [utterance, """"nothing""""].concat(NEWLINE  simplePropositionsNEWLINE );NEWLINE };NEWLINE var utterances = getAlternativeUtterances(utterance);NEWLINE var costs = map(function(utterance) {NEWLINE if (utterance == """"nothing"""") {NEWLINE  return 0;NEWLINE } else {NEWLINE  var words = utterance.split("""" """");NEWLINE  var chars = utterance.split("""""""");NEWLINE  var negs = filter(function(x) {return x == """"!"""";}, chars);NEWLINE  return words.length;NEWLINE }NEWLINE }, utterances);NEWLINE return function() {NEWLINE var probabilities = map(function(x) {return Math.exp(-x);}, costs);NEWLINE return utterances[discrete(probabilities)];NEWLINE };NEWLINE};”""NEWLINE"		
aliceWin & bobLazy	listener	aliceWin	1	[ { aliceStrong: false,  aliceLazy: false,  bobStrong: false,  bobLazy: true,  aliceWin: true }, { aliceStrong: false,  aliceLazy: false,  bobStrong: true,  bobLazy: true,  aliceWin: true }, { aliceStrong: false,  aliceLazy: true,  bobStrong: false,  bobLazy: true,  aliceWin: true }, { aliceStrong: true,  aliceLazy: false,  bobStrong: false,  bobLazy: true,  aliceWin: true }, { aliceStrong: true,  aliceLazy: false,  bobStrong: true,  bobLazy: true,  aliceWin: true }, { aliceStrong: true,  aliceLazy: true,  bobStrong: false,  bobLazy: true,  aliceWin: true }, { aliceStrong: true,  aliceLazy: true,  bobStrong: true,  bobLazy: true,  aliceWin: true } ][ 0.2528864225333128, 0.12644321126665706, 0.0287243802833511, 0.2528864225333128, 0.2528864225333128, 0.057448760566702096, 0.0287243802833511 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"""“var getUtterancePrior = function(utterance) {NEWLINE var basePropositions = ['aliceStrong', 'aliceLazy', 'bobStrong', 'bobLazy', 'aliceWin'];NEWLINE var getAlternativeUtterances = function(utterance) {NEWLINE var negPropositions = map(function(p) {return """"!"""" + p;}, basePropositions);NEWLINE var simplePropositions = negPropositions.concat(basePropositions);NEWLINE return [utterance, """"nothing""""].concat(NEWLINE  simplePropositionsNEWLINE );NEWLINE };NEWLINE var utterances = getAlternativeUtterances(utterance);NEWLINE var costs = map(function(utterance) {NEWLINE if (utterance == """"nothing"""") {NEWLINE  return 0;NEWLINE } else {NEWLINE  var words = utterance.split("""" """");NEWLINE  var chars = utterance.split("""""""");NEWLINE  var negs = filter(function(x) {return x == """"!"""";}, chars);NEWLINE  return words.length;NEWLINE }NEWLINE }, utterances);NEWLINE return function() {NEWLINE var probabilities = map(function(x) {return Math.exp(-x);}, costs);NEWLINE return utterances[discrete(probabilities)];NEWLINE };NEWLINE};”""NEWLINE"		
aliceWin because bobLazy	listener	aliceStrong	0.37	[ { aliceStrong: false,  aliceLazy: false,  bobStrong: false,  bobLazy: true,  aliceWin: true }, { aliceStrong: false,  aliceLazy: false,  bobStrong: true,  bobLazy: true,  aliceWin: true }, { aliceStrong: false,  aliceLazy: true,  bobStrong: false,  bobLazy: true,  aliceWin: true }, { aliceStrong: true,  aliceLazy: false,  bobStrong: false,  bobLazy: true,  aliceWin: true }, { aliceStrong: true,  aliceLazy: false,  bobStrong: true,  bobLazy: true,  aliceWin: true }, { aliceStrong: true,  aliceLazy: true,  bobStrong: false,  bobLazy: true,  aliceWin: true }, { aliceStrong: true,  aliceLazy: true,  bobStrong: true,  bobLazy: true,  aliceWin: true } ],[ 0.23309638635376836, 0.33578753213106, 0.0661017982955315, 0.015572971462202524, 0.2330963863537675, 0.05024312710814109, 0.0661017982955315 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"""“var getUtterancePrior = function(utterance) {NEWLINE var basePropositions = ['aliceStrong', 'aliceLazy', 'bobStrong', 'bobLazy', 'aliceWin'];NEWLINE var getAlternativeUtterances = function(utterance) {NEWLINE var negPropositions = map(function(p) {return """"!"""" + p;}, basePropositions);NEWLINE var simplePropositions = negPropositions.concat(basePropositions);NEWLINE return [utterance, """"nothing""""].concat(NEWLINE  simplePropositionsNEWLINE );NEWLINE };NEWLINE var utterances = getAlternativeUtterances(utterance);NEWLINE var costs = map(function(utterance) {NEWLINE if (utterance == """"nothing"""") {NEWLINE  return 0;NEWLINE } else {NEWLINE  var words = utterance.split("""" """");NEWLINE  var chars = utterance.split("""""""");NEWLINE  var negs = filter(function(x) {return x == """"!"""";}, chars);NEWLINE  return words.length;NEWLINE }NEWLINE }, utterances);NEWLINE return function() {NEWLINE var probabilities = map(function(x) {return Math.exp(-x);}, costs);NEWLINE return utterances[discrete(probabilities)];NEWLINE };NEWLINE};”""NEWLINE"		
aliceWin because bobLazy	listener	aliceLazy	0.18	[ { aliceStrong: false,  aliceLazy: false,  bobStrong: false,  bobLazy: true,  aliceWin: true }, { aliceStrong: false,  aliceLazy: false,  bobStrong: true,  bobLazy: true,  aliceWin: true }, { aliceStrong: false,  aliceLazy: true,  bobStrong: false,  bobLazy: true,  aliceWin: true }, { aliceStrong: true,  aliceLazy: false,  bobStrong: false,  bobLazy: true,  aliceWin: true }, { aliceStrong: true,  aliceLazy: false,  bobStrong: true,  bobLazy: true,  aliceWin: true }, { aliceStrong: true,  aliceLazy: true,  bobStrong: false,  bobLazy: true,  aliceWin: true }, { aliceStrong: true,  aliceLazy: true,  bobStrong: true,  bobLazy: true,  aliceWin: true } ],[ 0.23309638635376836, 0.33578753213106, 0.0661017982955315, 0.015572971462202524, 0.2330963863537675, 0.05024312710814109, 0.0661017982955315 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"""“var getUtterancePrior = function(utterance) {NEWLINE var basePropositions = ['aliceStrong', 'aliceLazy', 'bobStrong', 'bobLazy', 'aliceWin'];NEWLINE var getAlternativeUtterances = function(utterance) {NEWLINE var negPropositions = map(function(p) {return """"!"""" + p;}, basePropositions);NEWLINE var simplePropositions = negPropositions.concat(basePropositions);NEWLINE return [utterance, """"nothing""""].concat(NEWLINE  simplePropositionsNEWLINE );NEWLINE };NEWLINE var utterances = getAlternativeUtterances(utterance);NEWLINE var costs = map(function(utterance) {NEWLINE if (utterance == """"nothing"""") {NEWLINE  return 0;NEWLINE } else {NEWLINE  var words = utterance.split("""" """");NEWLINE  var chars = utterance.split("""""""");NEWLINE  var negs = filter(function(x) {return x == """"!"""";}, chars);NEWLINE  return words.length;NEWLINE }NEWLINE }, utterances);NEWLINE return function() {NEWLINE var probabilities = map(function(x) {return Math.exp(-x);}, costs);NEWLINE return utterances[discrete(probabilities)];NEWLINE };NEWLINE};”""NEWLINE"		
aliceWin because bobLazy	listener	bobStrong	0.63	[ { aliceStrong: false,  aliceLazy: false,  bobStrong: false,  bobLazy: true,  aliceWin: true }, { aliceStrong: false,  aliceLazy: false,  bobStrong: true,  bobLazy: true,  aliceWin: true }, { aliceStrong: false,  aliceLazy: true,  bobStrong: false,  bobLazy: true,  aliceWin: true }, { aliceStrong: true,  aliceLazy: false,  bobStrong: false,  bobLazy: true,  aliceWin: true }, { aliceStrong: true,  aliceLazy: false,  bobStrong: true,  bobLazy: true,  aliceWin: true }, { aliceStrong: true,  aliceLazy: true,  bobStrong: false,  bobLazy: true,  aliceWin: true }, { aliceStrong: true,  aliceLazy: true,  bobStrong: true,  bobLazy: true,  aliceWin: true } ],[ 0.23309638635376836, 0.33578753213106, 0.0661017982955315, 0.015572971462202524, 0.2330963863537675, 0.05024312710814109, 0.0661017982955315 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"""“var getUtterancePrior = function(utterance) {NEWLINE var basePropositions = ['aliceStrong', 'aliceLazy', 'bobStrong', 'bobLazy', 'aliceWin'];NEWLINE var getAlternativeUtterances = function(utterance) {NEWLINE var negPropositions = map(function(p) {return """"!"""" + p;}, basePropositions);NEWLINE var simplePropositions = negPropositions.concat(basePropositions);NEWLINE return [utterance, """"nothing""""].concat(NEWLINE  simplePropositionsNEWLINE );NEWLINE };NEWLINE var utterances = getAlternativeUtterances(utterance);NEWLINE var costs = map(function(utterance) {NEWLINE if (utterance == """"nothing"""") {NEWLINE  return 0;NEWLINE } else {NEWLINE  var words = utterance.split("""" """");NEWLINE  var chars = utterance.split("""""""");NEWLINE  var negs = filter(function(x) {return x == """"!"""";}, chars);NEWLINE  return words.length;NEWLINE }NEWLINE }, utterances);NEWLINE return function() {NEWLINE var probabilities = map(function(x) {return Math.exp(-x);}, costs);NEWLINE return utterances[discrete(probabilities)];NEWLINE };NEWLINE};”""NEWLINE"		
aliceWin because bobLazy	listener	bobLazy	1	[ { aliceStrong: false,  aliceLazy: false,  bobStrong: false,  bobLazy: true,  aliceWin: true }, { aliceStrong: false,  aliceLazy: false,  bobStrong: true,  bobLazy: true,  aliceWin: true }, { aliceStrong: false,  aliceLazy: true,  bobStrong: false,  bobLazy: true,  aliceWin: true }, { aliceStrong: true,  aliceLazy: false,  bobStrong: false,  bobLazy: true,  aliceWin: true }, { aliceStrong: true,  aliceLazy: false,  bobStrong: true,  bobLazy: true,  aliceWin: true }, { aliceStrong: true,  aliceLazy: true,  bobStrong: false,  bobLazy: true,  aliceWin: true }, { aliceStrong: true,  aliceLazy: true,  bobStrong: true,  bobLazy: true,  aliceWin: true } ],[ 0.23309638635376836, 0.33578753213106, 0.0661017982955315, 0.015572971462202524, 0.2330963863537675, 0.05024312710814109, 0.0661017982955315 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"""“var getUtterancePrior = function(utterance) {NEWLINE var basePropositions = ['aliceStrong', 'aliceLazy', 'bobStrong', 'bobLazy', 'aliceWin'];NEWLINE var getAlternativeUtterances = function(utterance) {NEWLINE var negPropositions = map(function(p) {return """"!"""" + p;}, basePropositions);NEWLINE var simplePropositions = negPropositions.concat(basePropositions);NEWLINE return [utterance, """"nothing""""].concat(NEWLINE  simplePropositionsNEWLINE );NEWLINE };NEWLINE var utterances = getAlternativeUtterances(utterance);NEWLINE var costs = map(function(utterance) {NEWLINE if (utterance == """"nothing"""") {NEWLINE  return 0;NEWLINE } else {NEWLINE  var words = utterance.split("""" """");NEWLINE  var chars = utterance.split("""""""");NEWLINE  var negs = filter(function(x) {return x == """"!"""";}, chars);NEWLINE  return words.length;NEWLINE }NEWLINE }, utterances);NEWLINE return function() {NEWLINE var probabilities = map(function(x) {return Math.exp(-x);}, costs);NEWLINE return utterances[discrete(probabilities)];NEWLINE };NEWLINE};”""NEWLINE"		
aliceWin because bobLazy	listener	aliceWin	1	[ { aliceStrong: false,  aliceLazy: false,  bobStrong: false,  bobLazy: true,  aliceWin: true }, { aliceStrong: false,  aliceLazy: false,  bobStrong: true,  bobLazy: true,  aliceWin: true }, { aliceStrong: false,  aliceLazy: true,  bobStrong: false,  bobLazy: true,  aliceWin: true }, { aliceStrong: true,  aliceLazy: false,  bobStrong: false,  bobLazy: true,  aliceWin: true }, { aliceStrong: true,  aliceLazy: false,  bobStrong: true,  bobLazy: true,  aliceWin: true }, { aliceStrong: true,  aliceLazy: true,  bobStrong: false,  bobLazy: true,  aliceWin: true }, { aliceStrong: true,  aliceLazy: true,  bobStrong: true,  bobLazy: true,  aliceWin: true } ],[ 0.23309638635376836, 0.33578753213106, 0.0661017982955315, 0.015572971462202524, 0.2330963863537675, 0.05024312710814109, 0.0661017982955315 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"""“var getUtterancePrior = function(utterance) {NEWLINE var basePropositions = ['aliceStrong', 'aliceLazy', 'bobStrong', 'bobLazy', 'aliceWin'];NEWLINE var getAlternativeUtterances = function(utterance) {NEWLINE var negPropositions = map(function(p) {return """"!"""" + p;}, basePropositions);NEWLINE var simplePropositions = negPropositions.concat(basePropositions);NEWLINE return [utterance, """"nothing""""].concat(NEWLINE  simplePropositionsNEWLINE );NEWLINE };NEWLINE var utterances = getAlternativeUtterances(utterance);NEWLINE var costs = map(function(utterance) {NEWLINE if (utterance == """"nothing"""") {NEWLINE  return 0;NEWLINE } else {NEWLINE  var words = utterance.split("""" """");NEWLINE  var chars = utterance.split("""""""");NEWLINE  var negs = filter(function(x) {return x == """"!"""";}, chars);NEWLINE  return words.length;NEWLINE }NEWLINE }, utterances);NEWLINE return function() {NEWLINE var probabilities = map(function(x) {return Math.exp(-x);}, costs);NEWLINE return utterances[discrete(probabilities)];NEWLINE };NEWLINE};”""NEWLINE"		
aliceWin & aliceStrong	listener	aliceStrong	1	[ { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.4805356293111606, 0.09838513291210135, 0.24026781465558075, 0.09838513291210135, 0.049192566456051114, 0.02215581583533516, 0.011077907917667525 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"""“var getUtterancePrior = function(utterance) {NEWLINE var basePropositions = ['aliceStrong', 'aliceLazy', 'bobStrong', 'bobLazy', 'aliceWin'];NEWLINE var getAlternativeUtterances = function(utterance) {NEWLINE var negPropositions = map(function(p) {return """"!"""" + p;}, basePropositions);NEWLINE var simplePropositions = negPropositions.concat(basePropositions);NEWLINE return [utterance, """"nothing""""].concat(NEWLINE  simplePropositionsNEWLINE );NEWLINE };NEWLINE var utterances = getAlternativeUtterances(utterance);NEWLINE var costs = map(function(utterance) {NEWLINE if (utterance == """"nothing"""") {NEWLINE  return 0;NEWLINE } else {NEWLINE  var words = utterance.split("""" """");NEWLINE  var chars = utterance.split("""""""");NEWLINE  var negs = filter(function(x) {return x == """"!"""";}, chars);NEWLINE  return words.length;NEWLINE }NEWLINE }, utterances);NEWLINE return function() {NEWLINE var probabilities = map(function(x) {return Math.exp(-x);}, costs);NEWLINE return utterances[discrete(probabilities)];NEWLINE };NEWLINE};”""NEWLINE"		
aliceWin & aliceStrong	listener	aliceLazy	0.92	[ { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.4805356293111606, 0.09838513291210135, 0.24026781465558075, 0.09838513291210135, 0.049192566456051114, 0.02215581583533516, 0.011077907917667525 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"""“var getUtterancePrior = function(utterance) {NEWLINE var basePropositions = ['aliceStrong', 'aliceLazy', 'bobStrong', 'bobLazy', 'aliceWin'];NEWLINE var getAlternativeUtterances = function(utterance) {NEWLINE var negPropositions = map(function(p) {return """"!"""" + p;}, basePropositions);NEWLINE var simplePropositions = negPropositions.concat(basePropositions);NEWLINE return [utterance, """"nothing""""].concat(NEWLINE  simplePropositionsNEWLINE );NEWLINE };NEWLINE var utterances = getAlternativeUtterances(utterance);NEWLINE var costs = map(function(utterance) {NEWLINE if (utterance == """"nothing"""") {NEWLINE  return 0;NEWLINE } else {NEWLINE  var words = utterance.split("""" """");NEWLINE  var chars = utterance.split("""""""");NEWLINE  var negs = filter(function(x) {return x == """"!"""";}, chars);NEWLINE  return words.length;NEWLINE }NEWLINE }, utterances);NEWLINE return function() {NEWLINE var probabilities = map(function(x) {return Math.exp(-x);}, costs);NEWLINE return utterances[discrete(probabilities)];NEWLINE };NEWLINE};”""NEWLINE"		
aliceWin & aliceStrong	listener	bobStrong	0.35	[ { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.4805356293111606, 0.09838513291210135, 0.24026781465558075, 0.09838513291210135, 0.049192566456051114, 0.02215581583533516, 0.011077907917667525 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"""“var getUtterancePrior = function(utterance) {NEWLINE var basePropositions = ['aliceStrong', 'aliceLazy', 'bobStrong', 'bobLazy', 'aliceWin'];NEWLINE var getAlternativeUtterances = function(utterance) {NEWLINE var negPropositions = map(function(p) {return """"!"""" + p;}, basePropositions);NEWLINE var simplePropositions = negPropositions.concat(basePropositions);NEWLINE return [utterance, """"nothing""""].concat(NEWLINE  simplePropositionsNEWLINE );NEWLINE };NEWLINE var utterances = getAlternativeUtterances(utterance);NEWLINE var costs = map(function(utterance) {NEWLINE if (utterance == """"nothing"""") {NEWLINE  return 0;NEWLINE } else {NEWLINE  var words = utterance.split("""" """");NEWLINE  var chars = utterance.split("""""""");NEWLINE  var negs = filter(function(x) {return x == """"!"""";}, chars);NEWLINE  return words.length;NEWLINE }NEWLINE }, utterances);NEWLINE return function() {NEWLINE var probabilities = map(function(x) {return Math.exp(-x);}, costs);NEWLINE return utterances[discrete(probabilities)];NEWLINE };NEWLINE};”""NEWLINE"		
aliceWin & aliceStrong	listener	bobLazy	0.23	[ { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.4805356293111606, 0.09838513291210135, 0.24026781465558075, 0.09838513291210135, 0.049192566456051114, 0.02215581583533516, 0.011077907917667525 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"""“var getUtterancePrior = function(utterance) {NEWLINE var basePropositions = ['aliceStrong', 'aliceLazy', 'bobStrong', 'bobLazy', 'aliceWin'];NEWLINE var getAlternativeUtterances = function(utterance) {NEWLINE var negPropositions = map(function(p) {return """"!"""" + p;}, basePropositions);NEWLINE var simplePropositions = negPropositions.concat(basePropositions);NEWLINE return [utterance, """"nothing""""].concat(NEWLINE  simplePropositionsNEWLINE );NEWLINE };NEWLINE var utterances = getAlternativeUtterances(utterance);NEWLINE var costs = map(function(utterance) {NEWLINE if (utterance == """"nothing"""") {NEWLINE  return 0;NEWLINE } else {NEWLINE  var words = utterance.split("""" """");NEWLINE  var chars = utterance.split("""""""");NEWLINE  var negs = filter(function(x) {return x == """"!"""";}, chars);NEWLINE  return words.length;NEWLINE }NEWLINE }, utterances);NEWLINE return function() {NEWLINE var probabilities = map(function(x) {return Math.exp(-x);}, costs);NEWLINE return utterances[discrete(probabilities)];NEWLINE };NEWLINE};”""NEWLINE"		
aliceWin & aliceStrong	listener	aliceWin	1	[ { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.4805356293111606, 0.09838513291210135, 0.24026781465558075, 0.09838513291210135, 0.049192566456051114, 0.02215581583533516, 0.011077907917667525 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"""“var getUtterancePrior = function(utterance) {NEWLINE var basePropositions = ['aliceStrong', 'aliceLazy', 'bobStrong', 'bobLazy', 'aliceWin'];NEWLINE var getAlternativeUtterances = function(utterance) {NEWLINE var negPropositions = map(function(p) {return """"!"""" + p;}, basePropositions);NEWLINE var simplePropositions = negPropositions.concat(basePropositions);NEWLINE return [utterance, """"nothing""""].concat(NEWLINE  simplePropositionsNEWLINE );NEWLINE };NEWLINE var utterances = getAlternativeUtterances(utterance);NEWLINE var costs = map(function(utterance) {NEWLINE if (utterance == """"nothing"""") {NEWLINE  return 0;NEWLINE } else {NEWLINE  var words = utterance.split("""" """");NEWLINE  var chars = utterance.split("""""""");NEWLINE  var negs = filter(function(x) {return x == """"!"""";}, chars);NEWLINE  return words.length;NEWLINE }NEWLINE }, utterances);NEWLINE return function() {NEWLINE var probabilities = map(function(x) {return Math.exp(-x);}, costs);NEWLINE return utterances[discrete(probabilities)];NEWLINE };NEWLINE};”""NEWLINE"		
aliceWin because aliceStrong	listener	aliceStrong	1	[ { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.33613896944141314, 0.005892968699774233, 0.47847737876774943, 0.0667843163049719, 0.08202016114367737, 0.014006441180585244, 0.016679764461828808 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"""“var getUtterancePrior = function(utterance) {NEWLINE var basePropositions = ['aliceStrong', 'aliceLazy', 'bobStrong', 'bobLazy', 'aliceWin'];NEWLINE var getAlternativeUtterances = function(utterance) {NEWLINE var negPropositions = map(function(p) {return """"!"""" + p;}, basePropositions);NEWLINE var simplePropositions = negPropositions.concat(basePropositions);NEWLINE return [utterance, """"nothing""""].concat(NEWLINE  simplePropositionsNEWLINE );NEWLINE };NEWLINE var utterances = getAlternativeUtterances(utterance);NEWLINE var costs = map(function(utterance) {NEWLINE if (utterance == """"nothing"""") {NEWLINE  return 0;NEWLINE } else {NEWLINE  var words = utterance.split("""" """");NEWLINE  var chars = utterance.split("""""""");NEWLINE  var negs = filter(function(x) {return x == """"!"""";}, chars);NEWLINE  return words.length;NEWLINE }NEWLINE }, utterances);NEWLINE return function() {NEWLINE var probabilities = map(function(x) {return Math.exp(-x);}, costs);NEWLINE return utterances[discrete(probabilities)];NEWLINE };NEWLINE};”""NEWLINE"		
aliceWin because aliceStrong	listener	aliceLazy	0.11	[ { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.33613896944141314, 0.005892968699774233, 0.47847737876774943, 0.0667843163049719, 0.08202016114367737, 0.014006441180585244, 0.016679764461828808 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"""“var getUtterancePrior = function(utterance) {NEWLINE var basePropositions = ['aliceStrong', 'aliceLazy', 'bobStrong', 'bobLazy', 'aliceWin'];NEWLINE var getAlternativeUtterances = function(utterance) {NEWLINE var negPropositions = map(function(p) {return """"!"""" + p;}, basePropositions);NEWLINE var simplePropositions = negPropositions.concat(basePropositions);NEWLINE return [utterance, """"nothing""""].concat(NEWLINE  simplePropositionsNEWLINE );NEWLINE };NEWLINE var utterances = getAlternativeUtterances(utterance);NEWLINE var costs = map(function(utterance) {NEWLINE if (utterance == """"nothing"""") {NEWLINE  return 0;NEWLINE } else {NEWLINE  var words = utterance.split("""" """");NEWLINE  var chars = utterance.split("""""""");NEWLINE  var negs = filter(function(x) {return x == """"!"""";}, chars);NEWLINE  return words.length;NEWLINE }NEWLINE }, utterances);NEWLINE return function() {NEWLINE var probabilities = map(function(x) {return Math.exp(-x);}, costs);NEWLINE return utterances[discrete(probabilities)];NEWLINE };NEWLINE};”""NEWLINE"		
aliceWin because aliceStrong	listener	bobStrong	0.56	[ { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.33613896944141314, 0.005892968699774233, 0.47847737876774943, 0.0667843163049719, 0.08202016114367737, 0.014006441180585244, 0.016679764461828808 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"""“var getUtterancePrior = function(utterance) {NEWLINE var basePropositions = ['aliceStrong', 'aliceLazy', 'bobStrong', 'bobLazy', 'aliceWin'];NEWLINE var getAlternativeUtterances = function(utterance) {NEWLINE var negPropositions = map(function(p) {return """"!"""" + p;}, basePropositions);NEWLINE var simplePropositions = negPropositions.concat(basePropositions);NEWLINE return [utterance, """"nothing""""].concat(NEWLINE  simplePropositionsNEWLINE );NEWLINE };NEWLINE var utterances = getAlternativeUtterances(utterance);NEWLINE var costs = map(function(utterance) {NEWLINE if (utterance == """"nothing"""") {NEWLINE  return 0;NEWLINE } else {NEWLINE  var words = utterance.split("""" """");NEWLINE  var chars = utterance.split("""""""");NEWLINE  var negs = filter(function(x) {return x == """"!"""";}, chars);NEWLINE  return words.length;NEWLINE }NEWLINE }, utterances);NEWLINE return function() {NEWLINE var probabilities = map(function(x) {return Math.exp(-x);}, costs);NEWLINE return utterances[discrete(probabilities)];NEWLINE };NEWLINE};”""NEWLINE"		
aliceWin because aliceStrong	listener	bobLazy	0.1	[ { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.33613896944141314, 0.005892968699774233, 0.47847737876774943, 0.0667843163049719, 0.08202016114367737, 0.014006441180585244, 0.016679764461828808 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"""“var getUtterancePrior = function(utterance) {NEWLINE var basePropositions = ['aliceStrong', 'aliceLazy', 'bobStrong', 'bobLazy', 'aliceWin'];NEWLINE var getAlternativeUtterances = function(utterance) {NEWLINE var negPropositions = map(function(p) {return """"!"""" + p;}, basePropositions);NEWLINE var simplePropositions = negPropositions.concat(basePropositions);NEWLINE return [utterance, """"nothing""""].concat(NEWLINE  simplePropositionsNEWLINE );NEWLINE };NEWLINE var utterances = getAlternativeUtterances(utterance);NEWLINE var costs = map(function(utterance) {NEWLINE if (utterance == """"nothing"""") {NEWLINE  return 0;NEWLINE } else {NEWLINE  var words = utterance.split("""" """");NEWLINE  var chars = utterance.split("""""""");NEWLINE  var negs = filter(function(x) {return x == """"!"""";}, chars);NEWLINE  return words.length;NEWLINE }NEWLINE }, utterances);NEWLINE return function() {NEWLINE var probabilities = map(function(x) {return Math.exp(-x);}, costs);NEWLINE return utterances[discrete(probabilities)];NEWLINE };NEWLINE};”""NEWLINE"		
aliceWin because aliceStrong	listener	aliceWin	1	[ { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.33613896944141314, 0.005892968699774233, 0.47847737876774943, 0.0667843163049719, 0.08202016114367737, 0.014006441180585244, 0.016679764461828808 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"""“var getUtterancePrior = function(utterance) {NEWLINE var basePropositions = ['aliceStrong', 'aliceLazy', 'bobStrong', 'bobLazy', 'aliceWin'];NEWLINE var getAlternativeUtterances = function(utterance) {NEWLINE var negPropositions = map(function(p) {return """"!"""" + p;}, basePropositions);NEWLINE var simplePropositions = negPropositions.concat(basePropositions);NEWLINE return [utterance, """"nothing""""].concat(NEWLINE  simplePropositionsNEWLINE );NEWLINE };NEWLINE var utterances = getAlternativeUtterances(utterance);NEWLINE var costs = map(function(utterance) {NEWLINE if (utterance == """"nothing"""") {NEWLINE  return 0;NEWLINE } else {NEWLINE  var words = utterance.split("""" """");NEWLINE  var chars = utterance.split("""""""");NEWLINE  var negs = filter(function(x) {return x == """"!"""";}, chars);NEWLINE  return words.length;NEWLINE }NEWLINE }, utterances);NEWLINE return function() {NEWLINE var probabilities = map(function(x) {return Math.exp(-x);}, costs);NEWLINE return utterances[discrete(probabilities)];NEWLINE };NEWLINE};”""NEWLINE"		
aliceWin & !aliceLazy	listener	aliceStrong	0.7	[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.18425687862029563, 0.07513499586251861, 0.037567497931259373, 0.3685137572405907, 0.07513499586251861, 0.18425687862029563, 0.07513499586251861 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"""“var getUtterancePrior = function(utterance) {NEWLINE var basePropositions = ['aliceStrong', 'aliceLazy', 'bobStrong', 'bobLazy', 'aliceWin'];NEWLINE var getAlternativeUtterances = function(utterance) {NEWLINE var negPropositions = map(function(p) {return """"!"""" + p;}, basePropositions);NEWLINE var simplePropositions = negPropositions.concat(basePropositions);NEWLINE return [utterance, """"nothing""""].concat(NEWLINE  simplePropositionsNEWLINE );NEWLINE };NEWLINE var utterances = getAlternativeUtterances(utterance);NEWLINE var costs = map(function(utterance) {NEWLINE if (utterance == """"nothing"""") {NEWLINE  return 0;NEWLINE } else {NEWLINE  var words = utterance.split("""" """");NEWLINE  var chars = utterance.split("""""""");NEWLINE  var negs = filter(function(x) {return x == """"!"""";}, chars);NEWLINE  return words.length;NEWLINE }NEWLINE }, utterances);NEWLINE return function() {NEWLINE var probabilities = map(function(x) {return Math.exp(-x);}, costs);NEWLINE return utterances[discrete(probabilities)];NEWLINE };NEWLINE};”""NEWLINE"		
aliceWin & !aliceLazy	listener	aliceLazy	0	[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.18425687862029563, 0.07513499586251861, 0.037567497931259373, 0.3685137572405907, 0.07513499586251861, 0.18425687862029563, 0.07513499586251861 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"""“var getUtterancePrior = function(utterance) {NEWLINE var basePropositions = ['aliceStrong', 'aliceLazy', 'bobStrong', 'bobLazy', 'aliceWin'];NEWLINE var getAlternativeUtterances = function(utterance) {NEWLINE var negPropositions = map(function(p) {return """"!"""" + p;}, basePropositions);NEWLINE var simplePropositions = negPropositions.concat(basePropositions);NEWLINE return [utterance, """"nothing""""].concat(NEWLINE  simplePropositionsNEWLINE );NEWLINE };NEWLINE var utterances = getAlternativeUtterances(utterance);NEWLINE var costs = map(function(utterance) {NEWLINE if (utterance == """"nothing"""") {NEWLINE  return 0;NEWLINE } else {NEWLINE  var words = utterance.split("""" """");NEWLINE  var chars = utterance.split("""""""");NEWLINE  var negs = filter(function(x) {return x == """"!"""";}, chars);NEWLINE  return words.length;NEWLINE }NEWLINE }, utterances);NEWLINE return function() {NEWLINE var probabilities = map(function(x) {return Math.exp(-x);}, costs);NEWLINE return utterances[discrete(probabilities)];NEWLINE };NEWLINE};”""NEWLINE"		
aliceWin & !aliceLazy	listener	bobStrong	0.3	[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.18425687862029563, 0.07513499586251861, 0.037567497931259373, 0.3685137572405907, 0.07513499586251861, 0.18425687862029563, 0.07513499586251861 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"""“var getUtterancePrior = function(utterance) {NEWLINE var basePropositions = ['aliceStrong', 'aliceLazy', 'bobStrong', 'bobLazy', 'aliceWin'];NEWLINE var getAlternativeUtterances = function(utterance) {NEWLINE var negPropositions = map(function(p) {return """"!"""" + p;}, basePropositions);NEWLINE var simplePropositions = negPropositions.concat(basePropositions);NEWLINE return [utterance, """"nothing""""].concat(NEWLINE  simplePropositionsNEWLINE );NEWLINE };NEWLINE var utterances = getAlternativeUtterances(utterance);NEWLINE var costs = map(function(utterance) {NEWLINE if (utterance == """"nothing"""") {NEWLINE  return 0;NEWLINE } else {NEWLINE  var words = utterance.split("""" """");NEWLINE  var chars = utterance.split("""""""");NEWLINE  var negs = filter(function(x) {return x == """"!"""";}, chars);NEWLINE  return words.length;NEWLINE }NEWLINE }, utterances);NEWLINE return function() {NEWLINE var probabilities = map(function(x) {return Math.exp(-x);}, costs);NEWLINE return utterances[discrete(probabilities)];NEWLINE };NEWLINE};”""NEWLINE"		
aliceWin & !aliceLazy	listener	bobLazy	0.26	[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.18425687862029563, 0.07513499586251861, 0.037567497931259373, 0.3685137572405907, 0.07513499586251861, 0.18425687862029563, 0.07513499586251861 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"""“var getUtterancePrior = function(utterance) {NEWLINE var basePropositions = ['aliceStrong', 'aliceLazy', 'bobStrong', 'bobLazy', 'aliceWin'];NEWLINE var getAlternativeUtterances = function(utterance) {NEWLINE var negPropositions = map(function(p) {return """"!"""" + p;}, basePropositions);NEWLINE var simplePropositions = negPropositions.concat(basePropositions);NEWLINE return [utterance, """"nothing""""].concat(NEWLINE  simplePropositionsNEWLINE );NEWLINE };NEWLINE var utterances = getAlternativeUtterances(utterance);NEWLINE var costs = map(function(utterance) {NEWLINE if (utterance == """"nothing"""") {NEWLINE  return 0;NEWLINE } else {NEWLINE  var words = utterance.split("""" """");NEWLINE  var chars = utterance.split("""""""");NEWLINE  var negs = filter(function(x) {return x == """"!"""";}, chars);NEWLINE  return words.length;NEWLINE }NEWLINE }, utterances);NEWLINE return function() {NEWLINE var probabilities = map(function(x) {return Math.exp(-x);}, costs);NEWLINE return utterances[discrete(probabilities)];NEWLINE };NEWLINE};”""NEWLINE"		
aliceWin & !aliceLazy	listener	aliceWin	1	[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.18425687862029563, 0.07513499586251861, 0.037567497931259373, 0.3685137572405907, 0.07513499586251861, 0.18425687862029563, 0.07513499586251861 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"""“var getUtterancePrior = function(utterance) {NEWLINE var basePropositions = ['aliceStrong', 'aliceLazy', 'bobStrong', 'bobLazy', 'aliceWin'];NEWLINE var getAlternativeUtterances = function(utterance) {NEWLINE var negPropositions = map(function(p) {return """"!"""" + p;}, basePropositions);NEWLINE var simplePropositions = negPropositions.concat(basePropositions);NEWLINE return [utterance, """"nothing""""].concat(NEWLINE  simplePropositionsNEWLINE );NEWLINE };NEWLINE var utterances = getAlternativeUtterances(utterance);NEWLINE var costs = map(function(utterance) {NEWLINE if (utterance == """"nothing"""") {NEWLINE  return 0;NEWLINE } else {NEWLINE  var words = utterance.split("""" """");NEWLINE  var chars = utterance.split("""""""");NEWLINE  var negs = filter(function(x) {return x == """"!"""";}, chars);NEWLINE  return words.length;NEWLINE }NEWLINE }, utterances);NEWLINE return function() {NEWLINE var probabilities = map(function(x) {return Math.exp(-x);}, costs);NEWLINE return utterances[discrete(probabilities)];NEWLINE };NEWLINE};”""NEWLINE"		
aliceWin because !aliceLazy	listener	aliceStrong	0.6	[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.30171675998340236, 0.047215506592008426, 0.05375686368563648, 0.2429049843362766, 0.005473618827267572, 0.30171675998340236, 0.047215506592008426 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"""“var getUtterancePrior = function(utterance) {NEWLINE var basePropositions = ['aliceStrong', 'aliceLazy', 'bobStrong', 'bobLazy', 'aliceWin'];NEWLINE var getAlternativeUtterances = function(utterance) {NEWLINE var negPropositions = map(function(p) {return """"!"""" + p;}, basePropositions);NEWLINE var simplePropositions = negPropositions.concat(basePropositions);NEWLINE return [utterance, """"nothing""""].concat(NEWLINE  simplePropositionsNEWLINE );NEWLINE };NEWLINE var utterances = getAlternativeUtterances(utterance);NEWLINE var costs = map(function(utterance) {NEWLINE if (utterance == """"nothing"""") {NEWLINE  return 0;NEWLINE } else {NEWLINE  var words = utterance.split("""" """");NEWLINE  var chars = utterance.split("""""""");NEWLINE  var negs = filter(function(x) {return x == """"!"""";}, chars);NEWLINE  return words.length;NEWLINE }NEWLINE }, utterances);NEWLINE return function() {NEWLINE var probabilities = map(function(x) {return Math.exp(-x);}, costs);NEWLINE return utterances[discrete(probabilities)];NEWLINE };NEWLINE};”""NEWLINE"		
aliceWin because !aliceLazy	listener	aliceLazy	0	[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.30171675998340236, 0.047215506592008426, 0.05375686368563648, 0.2429049843362766, 0.005473618827267572, 0.30171675998340236, 0.047215506592008426 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"""“var getUtterancePrior = function(utterance) {NEWLINE var basePropositions = ['aliceStrong', 'aliceLazy', 'bobStrong', 'bobLazy', 'aliceWin'];NEWLINE var getAlternativeUtterances = function(utterance) {NEWLINE var negPropositions = map(function(p) {return """"!"""" + p;}, basePropositions);NEWLINE var simplePropositions = negPropositions.concat(basePropositions);NEWLINE return [utterance, """"nothing""""].concat(NEWLINE  simplePropositionsNEWLINE );NEWLINE };NEWLINE var utterances = getAlternativeUtterances(utterance);NEWLINE var costs = map(function(utterance) {NEWLINE if (utterance == """"nothing"""") {NEWLINE  return 0;NEWLINE } else {NEWLINE  var words = utterance.split("""" """");NEWLINE  var chars = utterance.split("""""""");NEWLINE  var negs = filter(function(x) {return x == """"!"""";}, chars);NEWLINE  return words.length;NEWLINE }NEWLINE }, utterances);NEWLINE return function() {NEWLINE var probabilities = map(function(x) {return Math.exp(-x);}, costs);NEWLINE return utterances[discrete(probabilities)];NEWLINE };NEWLINE};”""NEWLINE"		
aliceWin because !aliceLazy	listener	bobStrong	0.4	[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.30171675998340236, 0.047215506592008426, 0.05375686368563648, 0.2429049843362766, 0.005473618827267572, 0.30171675998340236, 0.047215506592008426 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"""“var getUtterancePrior = function(utterance) {NEWLINE var basePropositions = ['aliceStrong', 'aliceLazy', 'bobStrong', 'bobLazy', 'aliceWin'];NEWLINE var getAlternativeUtterances = function(utterance) {NEWLINE var negPropositions = map(function(p) {return """"!"""" + p;}, basePropositions);NEWLINE var simplePropositions = negPropositions.concat(basePropositions);NEWLINE return [utterance, """"nothing""""].concat(NEWLINE  simplePropositionsNEWLINE );NEWLINE };NEWLINE var utterances = getAlternativeUtterances(utterance);NEWLINE var costs = map(function(utterance) {NEWLINE if (utterance == """"nothing"""") {NEWLINE  return 0;NEWLINE } else {NEWLINE  var words = utterance.split("""" """");NEWLINE  var chars = utterance.split("""""""");NEWLINE  var negs = filter(function(x) {return x == """"!"""";}, chars);NEWLINE  return words.length;NEWLINE }NEWLINE }, utterances);NEWLINE return function() {NEWLINE var probabilities = map(function(x) {return Math.exp(-x);}, costs);NEWLINE return utterances[discrete(probabilities)];NEWLINE };NEWLINE};”""NEWLINE"		
aliceWin because !aliceLazy	listener	bobLazy	0.15	[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.30171675998340236, 0.047215506592008426, 0.05375686368563648, 0.2429049843362766, 0.005473618827267572, 0.30171675998340236, 0.047215506592008426 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"""“var getUtterancePrior = function(utterance) {NEWLINE var basePropositions = ['aliceStrong', 'aliceLazy', 'bobStrong', 'bobLazy', 'aliceWin'];NEWLINE var getAlternativeUtterances = function(utterance) {NEWLINE var negPropositions = map(function(p) {return """"!"""" + p;}, basePropositions);NEWLINE var simplePropositions = negPropositions.concat(basePropositions);NEWLINE return [utterance, """"nothing""""].concat(NEWLINE  simplePropositionsNEWLINE );NEWLINE };NEWLINE var utterances = getAlternativeUtterances(utterance);NEWLINE var costs = map(function(utterance) {NEWLINE if (utterance == """"nothing"""") {NEWLINE  return 0;NEWLINE } else {NEWLINE  var words = utterance.split("""" """");NEWLINE  var chars = utterance.split("""""""");NEWLINE  var negs = filter(function(x) {return x == """"!"""";}, chars);NEWLINE  return words.length;NEWLINE }NEWLINE }, utterances);NEWLINE return function() {NEWLINE var probabilities = map(function(x) {return Math.exp(-x);}, costs);NEWLINE return utterances[discrete(probabilities)];NEWLINE };NEWLINE};”""NEWLINE"		
aliceWin because !aliceLazy	listener	aliceWin	1	[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: true, bobLazy: true, aliceWin: true } ],[ 0.30171675998340236, 0.047215506592008426, 0.05375686368563648, 0.2429049843362766, 0.005473618827267572, 0.30171675998340236, 0.047215506592008426 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"""“var getUtterancePrior = function(utterance) {NEWLINE var basePropositions = ['aliceStrong', 'aliceLazy', 'bobStrong', 'bobLazy', 'aliceWin'];NEWLINE var getAlternativeUtterances = function(utterance) {NEWLINE var negPropositions = map(function(p) {return """"!"""" + p;}, basePropositions);NEWLINE var simplePropositions = negPropositions.concat(basePropositions);NEWLINE return [utterance, """"nothing""""].concat(NEWLINE  simplePropositionsNEWLINE );NEWLINE };NEWLINE var utterances = getAlternativeUtterances(utterance);NEWLINE var costs = map(function(utterance) {NEWLINE if (utterance == """"nothing"""") {NEWLINE  return 0;NEWLINE } else {NEWLINE  var words = utterance.split("""" """");NEWLINE  var chars = utterance.split("""""""");NEWLINE  var negs = filter(function(x) {return x == """"!"""";}, chars);NEWLINE  return words.length;NEWLINE }NEWLINE }, utterances);NEWLINE return function() {NEWLINE var probabilities = map(function(x) {return Math.exp(-x);}, costs);NEWLINE return utterances[discrete(probabilities)];NEWLINE };NEWLINE};”""NEWLINE"		
aliceWin & !bobStrong	listener	aliceStrong	0.65	[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true } ],[ 0.24026781465558075, 0.09838513291210135, 0.011077907917667525, 0.4805356293111606, 0.09838513291210135, 0.049192566456051114, 0.02215581583533516 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"""“var getUtterancePrior = function(utterance) {NEWLINE var basePropositions = ['aliceStrong', 'aliceLazy', 'bobStrong', 'bobLazy', 'aliceWin'];NEWLINE var getAlternativeUtterances = function(utterance) {NEWLINE var negPropositions = map(function(p) {return """"!"""" + p;}, basePropositions);NEWLINE var simplePropositions = negPropositions.concat(basePropositions);NEWLINE return [utterance, """"nothing""""].concat(NEWLINE  simplePropositionsNEWLINE );NEWLINE };NEWLINE var utterances = getAlternativeUtterances(utterance);NEWLINE var costs = map(function(utterance) {NEWLINE if (utterance == """"nothing"""") {NEWLINE  return 0;NEWLINE } else {NEWLINE  var words = utterance.split("""" """");NEWLINE  var chars = utterance.split("""""""");NEWLINE  var negs = filter(function(x) {return x == """"!"""";}, chars);NEWLINE  return words.length;NEWLINE }NEWLINE }, utterances);NEWLINE return function() {NEWLINE var probabilities = map(function(x) {return Math.exp(-x);}, costs);NEWLINE return utterances[discrete(probabilities)];NEWLINE };NEWLINE};”""NEWLINE"		
aliceWin & !bobStrong	listener	aliceLazy	0.08	[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true } ],[ 0.24026781465558075, 0.09838513291210135, 0.011077907917667525, 0.4805356293111606, 0.09838513291210135, 0.049192566456051114, 0.02215581583533516 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"""“var getUtterancePrior = function(utterance) {NEWLINE var basePropositions = ['aliceStrong', 'aliceLazy', 'bobStrong', 'bobLazy', 'aliceWin'];NEWLINE var getAlternativeUtterances = function(utterance) {NEWLINE var negPropositions = map(function(p) {return """"!"""" + p;}, basePropositions);NEWLINE var simplePropositions = negPropositions.concat(basePropositions);NEWLINE return [utterance, """"nothing""""].concat(NEWLINE  simplePropositionsNEWLINE );NEWLINE };NEWLINE var utterances = getAlternativeUtterances(utterance);NEWLINE var costs = map(function(utterance) {NEWLINE if (utterance == """"nothing"""") {NEWLINE  return 0;NEWLINE } else {NEWLINE  var words = utterance.split("""" """");NEWLINE  var chars = utterance.split("""""""");NEWLINE  var negs = filter(function(x) {return x == """"!"""";}, chars);NEWLINE  return words.length;NEWLINE }NEWLINE }, utterances);NEWLINE return function() {NEWLINE var probabilities = map(function(x) {return Math.exp(-x);}, costs);NEWLINE return utterances[discrete(probabilities)];NEWLINE };NEWLINE};”""NEWLINE"		
aliceWin & !bobStrong	listener	bobStrong	0	[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true } ],[ 0.24026781465558075, 0.09838513291210135, 0.011077907917667525, 0.4805356293111606, 0.09838513291210135, 0.049192566456051114, 0.02215581583533516 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"""“var getUtterancePrior = function(utterance) {NEWLINE var basePropositions = ['aliceStrong', 'aliceLazy', 'bobStrong', 'bobLazy', 'aliceWin'];NEWLINE var getAlternativeUtterances = function(utterance) {NEWLINE var negPropositions = map(function(p) {return """"!"""" + p;}, basePropositions);NEWLINE var simplePropositions = negPropositions.concat(basePropositions);NEWLINE return [utterance, """"nothing""""].concat(NEWLINE  simplePropositionsNEWLINE );NEWLINE };NEWLINE var utterances = getAlternativeUtterances(utterance);NEWLINE var costs = map(function(utterance) {NEWLINE if (utterance == """"nothing"""") {NEWLINE  return 0;NEWLINE } else {NEWLINE  var words = utterance.split("""" """");NEWLINE  var chars = utterance.split("""""""");NEWLINE  var negs = filter(function(x) {return x == """"!"""";}, chars);NEWLINE  return words.length;NEWLINE }NEWLINE }, utterances);NEWLINE return function() {NEWLINE var probabilities = map(function(x) {return Math.exp(-x);}, costs);NEWLINE return utterances[discrete(probabilities)];NEWLINE };NEWLINE};”""NEWLINE"		
aliceWin & !bobStrong	listener	bobLazy	0.23	[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true } ],[ 0.24026781465558075, 0.09838513291210135, 0.011077907917667525, 0.4805356293111606, 0.09838513291210135, 0.049192566456051114, 0.02215581583533516 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"""“var getUtterancePrior = function(utterance) {NEWLINE var basePropositions = ['aliceStrong', 'aliceLazy', 'bobStrong', 'bobLazy', 'aliceWin'];NEWLINE var getAlternativeUtterances = function(utterance) {NEWLINE var negPropositions = map(function(p) {return """"!"""" + p;}, basePropositions);NEWLINE var simplePropositions = negPropositions.concat(basePropositions);NEWLINE return [utterance, """"nothing""""].concat(NEWLINE  simplePropositionsNEWLINE );NEWLINE };NEWLINE var utterances = getAlternativeUtterances(utterance);NEWLINE var costs = map(function(utterance) {NEWLINE if (utterance == """"nothing"""") {NEWLINE  return 0;NEWLINE } else {NEWLINE  var words = utterance.split("""" """");NEWLINE  var chars = utterance.split("""""""");NEWLINE  var negs = filter(function(x) {return x == """"!"""";}, chars);NEWLINE  return words.length;NEWLINE }NEWLINE }, utterances);NEWLINE return function() {NEWLINE var probabilities = map(function(x) {return Math.exp(-x);}, costs);NEWLINE return utterances[discrete(probabilities)];NEWLINE };NEWLINE};”""NEWLINE"		
aliceWin & !bobStrong	listener	aliceWin	1	[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true } ],[ 0.24026781465558075, 0.09838513291210135, 0.011077907917667525, 0.4805356293111606, 0.09838513291210135, 0.049192566456051114, 0.02215581583533516 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"""“var getUtterancePrior = function(utterance) {NEWLINE var basePropositions = ['aliceStrong', 'aliceLazy', 'bobStrong', 'bobLazy', 'aliceWin'];NEWLINE var getAlternativeUtterances = function(utterance) {NEWLINE var negPropositions = map(function(p) {return """"!"""" + p;}, basePropositions);NEWLINE var simplePropositions = negPropositions.concat(basePropositions);NEWLINE return [utterance, """"nothing""""].concat(NEWLINE  simplePropositionsNEWLINE );NEWLINE };NEWLINE var utterances = getAlternativeUtterances(utterance);NEWLINE var costs = map(function(utterance) {NEWLINE if (utterance == """"nothing"""") {NEWLINE  return 0;NEWLINE } else {NEWLINE  var words = utterance.split("""" """");NEWLINE  var chars = utterance.split("""""""");NEWLINE  var negs = filter(function(x) {return x == """"!"""";}, chars);NEWLINE  return words.length;NEWLINE }NEWLINE }, utterances);NEWLINE return function() {NEWLINE var probabilities = map(function(x) {return Math.exp(-x);}, costs);NEWLINE return utterances[discrete(probabilities)];NEWLINE };NEWLINE};”""NEWLINE"		
aliceWin because !bobStrong	listener	aliceStrong	0.44	[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true } ],[ 0.47847737876774943, 0.0667843163049719, 0.016679764461828808, 0.33613896944141314, 0.005892968699774233, 0.08202016114367737, 0.014006441180585145 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"""“var getUtterancePrior = function(utterance) {NEWLINE var basePropositions = ['aliceStrong', 'aliceLazy', 'bobStrong', 'bobLazy', 'aliceWin'];NEWLINE var getAlternativeUtterances = function(utterance) {NEWLINE var negPropositions = map(function(p) {return """"!"""" + p;}, basePropositions);NEWLINE var simplePropositions = negPropositions.concat(basePropositions);NEWLINE return [utterance, """"nothing""""].concat(NEWLINE  simplePropositionsNEWLINE );NEWLINE };NEWLINE var utterances = getAlternativeUtterances(utterance);NEWLINE var costs = map(function(utterance) {NEWLINE if (utterance == """"nothing"""") {NEWLINE  return 0;NEWLINE } else {NEWLINE  var words = utterance.split("""" """");NEWLINE  var chars = utterance.split("""""""");NEWLINE  var negs = filter(function(x) {return x == """"!"""";}, chars);NEWLINE  return words.length;NEWLINE }NEWLINE }, utterances);NEWLINE return function() {NEWLINE var probabilities = map(function(x) {return Math.exp(-x);}, costs);NEWLINE return utterances[discrete(probabilities)];NEWLINE };NEWLINE};”""NEWLINE"		
aliceWin because !bobStrong	listener	aliceLazy	0.11	[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true } ],[ 0.47847737876774943, 0.0667843163049719, 0.016679764461828808, 0.33613896944141314, 0.005892968699774233, 0.08202016114367737, 0.014006441180585145 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"""“var getUtterancePrior = function(utterance) {NEWLINE var basePropositions = ['aliceStrong', 'aliceLazy', 'bobStrong', 'bobLazy', 'aliceWin'];NEWLINE var getAlternativeUtterances = function(utterance) {NEWLINE var negPropositions = map(function(p) {return """"!"""" + p;}, basePropositions);NEWLINE var simplePropositions = negPropositions.concat(basePropositions);NEWLINE return [utterance, """"nothing""""].concat(NEWLINE  simplePropositionsNEWLINE );NEWLINE };NEWLINE var utterances = getAlternativeUtterances(utterance);NEWLINE var costs = map(function(utterance) {NEWLINE if (utterance == """"nothing"""") {NEWLINE  return 0;NEWLINE } else {NEWLINE  var words = utterance.split("""" """");NEWLINE  var chars = utterance.split("""""""");NEWLINE  var negs = filter(function(x) {return x == """"!"""";}, chars);NEWLINE  return words.length;NEWLINE }NEWLINE }, utterances);NEWLINE return function() {NEWLINE var probabilities = map(function(x) {return Math.exp(-x);}, costs);NEWLINE return utterances[discrete(probabilities)];NEWLINE };NEWLINE};”""NEWLINE"		
aliceWin because !bobStrong	listener	bobStrong	0	[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true } ],[ 0.47847737876774943, 0.0667843163049719, 0.016679764461828808, 0.33613896944141314, 0.005892968699774233, 0.08202016114367737, 0.014006441180585145 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"""“var getUtterancePrior = function(utterance) {NEWLINE var basePropositions = ['aliceStrong', 'aliceLazy', 'bobStrong', 'bobLazy', 'aliceWin'];NEWLINE var getAlternativeUtterances = function(utterance) {NEWLINE var negPropositions = map(function(p) {return """"!"""" + p;}, basePropositions);NEWLINE var simplePropositions = negPropositions.concat(basePropositions);NEWLINE return [utterance, """"nothing""""].concat(NEWLINE  simplePropositionsNEWLINE );NEWLINE };NEWLINE var utterances = getAlternativeUtterances(utterance);NEWLINE var costs = map(function(utterance) {NEWLINE if (utterance == """"nothing"""") {NEWLINE  return 0;NEWLINE } else {NEWLINE  var words = utterance.split("""" """");NEWLINE  var chars = utterance.split("""""""");NEWLINE  var negs = filter(function(x) {return x == """"!"""";}, chars);NEWLINE  return words.length;NEWLINE }NEWLINE }, utterances);NEWLINE return function() {NEWLINE var probabilities = map(function(x) {return Math.exp(-x);}, costs);NEWLINE return utterances[discrete(probabilities)];NEWLINE };NEWLINE};”""NEWLINE"		
aliceWin because !bobStrong	listener	bobLazy	0.1	[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true } ],[ 0.47847737876774943, 0.0667843163049719, 0.016679764461828808, 0.33613896944141314, 0.005892968699774233, 0.08202016114367737, 0.014006441180585145 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"""“var getUtterancePrior = function(utterance) {NEWLINE var basePropositions = ['aliceStrong', 'aliceLazy', 'bobStrong', 'bobLazy', 'aliceWin'];NEWLINE var getAlternativeUtterances = function(utterance) {NEWLINE var negPropositions = map(function(p) {return """"!"""" + p;}, basePropositions);NEWLINE var simplePropositions = negPropositions.concat(basePropositions);NEWLINE return [utterance, """"nothing""""].concat(NEWLINE  simplePropositionsNEWLINE );NEWLINE };NEWLINE var utterances = getAlternativeUtterances(utterance);NEWLINE var costs = map(function(utterance) {NEWLINE if (utterance == """"nothing"""") {NEWLINE  return 0;NEWLINE } else {NEWLINE  var words = utterance.split("""" """");NEWLINE  var chars = utterance.split("""""""");NEWLINE  var negs = filter(function(x) {return x == """"!"""";}, chars);NEWLINE  return words.length;NEWLINE }NEWLINE }, utterances);NEWLINE return function() {NEWLINE var probabilities = map(function(x) {return Math.exp(-x);}, costs);NEWLINE return utterances[discrete(probabilities)];NEWLINE };NEWLINE};”""NEWLINE"		
aliceWin because !bobStrong	listener	aliceWin	1	[ { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: false, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: false, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: false, bobStrong: false, bobLazy: true, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: false, aliceWin: true }, { aliceStrong: true, aliceLazy: true, bobStrong: false, bobLazy: true, aliceWin: true } ],[ 0.47847737876774943, 0.0667843163049719, 0.016679764461828808, 0.33613896944141314, 0.005892968699774233, 0.08202016114367737, 0.014006441180585145 ]	"“var costs = map(function(utterance) { if (utterance == ""nothing"") { return 0; } else { var words = utterance.split("" ""); var chars = utterance.split(""""); var negs = filter(function(x) {return x == ""!"";}, chars); return words.length; }}, utterances);”"	1	5	"""“var getUtterancePrior = function(utterance) {NEWLINE var basePropositions = ['aliceStrong', 'aliceLazy', 'bobStrong', 'bobLazy', 'aliceWin'];NEWLINE var getAlternativeUtterances = function(utterance) {NEWLINE var negPropositions = map(function(p) {return """"!"""" + p;}, basePropositions);NEWLINE var simplePropositions = negPropositions.concat(basePropositions);NEWLINE return [utterance, """"nothing""""].concat(NEWLINE  simplePropositionsNEWLINE );NEWLINE };NEWLINE var utterances = getAlternativeUtterances(utterance);NEWLINE var costs = map(function(utterance) {NEWLINE if (utterance == """"nothing"""") {NEWLINE  return 0;NEWLINE } else {NEWLINE  var words = utterance.split("""" """");NEWLINE  var chars = utterance.split("""""""");NEWLINE  var negs = filter(function(x) {return x == """"!"""";}, chars);NEWLINE  return words.length;NEWLINE }NEWLINE }, utterances);NEWLINE return function() {NEWLINE var probabilities = map(function(x) {return Math.exp(-x);}, costs);NEWLINE return utterances[discrete(probabilities)];NEWLINE };NEWLINE};”""NEWLINE"		
