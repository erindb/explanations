// ======== compatibility with  =========

var print = function(str) {
  console.log(str);
};

var printERP = function(erp) {
  var support = erp.support();
  var probs = map(function(x) {return Math.exp(erp.score([], x));}, support);
  print("var s = " + JSON.stringify(support) + ";");
  print("var p = " + JSON.stringify(probs) + ";");
  print("print(Enumerate(function() {return s[discrete(p)];}))")
};

var vizPrintERP = function(erp) {
  var support = erp.support();
  var probs = map(function(x) {return Math.exp(erp.score([], x));}, support);
  print("var s = " + JSON.stringify(support) + ";");
  print("var p = " + JSON.stringify(probs) + ";");
  print("vizPrint(Enumerate(function() {return s[discrete(p)];}))")
};

// ======== other utilities =========

var contextualEval = cache(function(proposition, world) {
  var context = reduce(
    function(keyVal, acc) {
      return acc + ' var ' + keyVal[0] + ' = ' + JSON.stringify(keyVal[1]) + ';';
    },
    "",
    _.pairs(world)
  );
  return webpplEval(context + proposition + ';');
});

// ======== model specification =========

var getParam = function() {
  return (randomInteger(9)+1)/10;
};

var getParams = function() {
  return [getParam(), getParam()];
};

var modelPrior = function() { return uniformDraw(['independent', 'cause', 'reverseCause', 'commonCause']); };

var models = {
  independent: {
    params: ['pA', 'pB'],
    rand: function(params) {
      var pA = params[0];
      var pB = params[1];
      return function() {return { uA: flip(pA), uB: flip(pB) }};
    },
    vars: function(rVs) {
      var A = rVs.uA;
      var B = rVs.uB;
      return {
        A: A,
        B: B
      }
    }
  },
  cause: {
    params: ['pA', 'pL'],
    rand: function(params) {
      var pA = params[0];
      var pL = params[1];
      return function() {return { uA: flip(pA), uAB: flip(pL) }};
    },
    vars: function(rVs) {
      var A = rVs.uA;
      var B = rVs.uAB ? A : !A;
      return {
        A: A,
        B: B
      }
    }
  },
  reverseCause: {
    params: ['pB', 'pL'],
    rand: function(params) {
      var pB = params[0];
      var pL = params[1];
      return function() {return { uB: flip(pB), uBA: flip(pL) }};
    },
    vars: function(rVs) {
      var B = rVs.uB;
      var A = rVs.uBA ? B : !B;
      return {
        A: A,
        B: B
      }
    }
  },
  commonCause: {
    params: ['pC', 'pL'],
    rand: function(params) {
      var pC = params[0];
      var pL = params[1];
      return function() {return { uC: flip(pC), uCA: flip(pL), uCB: flip(pL) }};
    },
    vars: function(rVs) {
      var C = rVs.uC;
      var A = rVs.uCA ? C : !C;
      var B = rVs.uCB ? C : !C;
      return {
        A: A,
        B: B
      }
    }
  }
}

// ======== parameters and counterfactual functions =========

// parameter for how similar counterfactual world is to actual world
var stickiness = 0.5;

var stickyRand = function(actualRVs, model, params) {
  var generalRand = models[model].rand;
  var rand = generalRand(params);
  var freshRVs = rand();
  return mapObject(function(key, val) {
    return flip(stickiness) ? actualRVs[key] : freshRVs[key];
  }, actualRVs);
};

var checkPossible = function(unfactoredERP) {
  var factorERP = Enumerate(function() {
    return sample(unfactoredERP).factor;
  });
  if (factorERP.score([], -Infinity) == 0) {
    // a sort of way of throwing errors if we try to evaluate an impossible utterance
    return 'impossible';
  } else {
    return Enumerate(function() {
      var result = sample(unfactoredERP);
      factor(result.factor);
      return result.result;
    });
  }
};

var counterfactualERP = function(ifA, thenB, actualRVs, model, params) {
  // print(ifA);
  // print(thenB);
  // print(actualRVs);
  // print(model);
  // print(params);
  var unfactoredERP = Enumerate(function() {
    var counterfactualRVs = stickyRand(actualRVs, model, params);
    var vars = models[model].vars;
    // print(vars);
    var counterfactualWorld = vars(counterfactualRVs);
    // print(counterfactualRVs);
    // print(counterfactualWorld);
    // print('hi');
    //print(counterfactualWorld);
    return {
      result: contextualEval(thenB, counterfactualWorld),
      factor: (contextualEval(ifA, counterfactualWorld) ? 0 : -Infinity)
    }
  });
  //unfactoredERP.print();
  return checkPossible(unfactoredERP);
};

// ======== literal meaning functions =========

var because = function(conditionA, resultB, actualWorld, actualRVs, model, params) {
  var actuallyA = contextualEval(conditionA, actualWorld);
  var actuallyB = contextualEval(resultB, actualWorld);

  // //// without "presuppositions"
  // var ifNotA = "!" + conditionA;
  // var thenNotB = "!" + resultB;
  // var cfERP = counterfactualERP(ifNotA, thenNotB, actualRVs, model, params);
  // return cfERP == 'impossible' ? -Infinity : cfERP.score([], true);

  //// with "presuppositions"
  if (actuallyA & actuallyB) {;

    var ifNotA = "!(" + conditionA + ")";
    var thenNotB = "!(" + resultB + ")";

    var cfERP = counterfactualERP(ifNotA, thenNotB, actualRVs, model, params);

    return cfERP == 'impossible' ? -Infinity : cfERP.score([], true);;
  } else {
    return -Infinity;
  }
};

/*
   meaning_factor is -Infinity if the utterance is completely false
   in the world, 0 if the utterance is true, and for "because" utterances
   it is the proportion of counterfactual worlds satisfying conditionA
   in which resultB is also true.
*/
var meaning_factor = cache(function(utterance, world, rVs, model, params) {
  if (utterance == 'nothing') {
    return 0;
  } else {
    var words = utterance.split(' ');
    var negation = words[0] == "itisnotthecasethat";
    var doubleNegation = negation ? words[1] == "itisnotthecasethat" : false;
    var restOfWords = doubleNegation ? words.slice(2) : negation ? words.slice(1) : words;
    if (restOfWords.length < 2 | restOfWords[1] != 'because') {
      var isTrue = contextualEval(restOfWords.join(' '), world);
      // if negation, check that negated utterance is true
      return (doubleNegation ? isTrue : negation ? !isTrue : isTrue) ? 0 : -Infinity;
    } else {
      // "resultB because conditionA"
      var resultB = restOfWords[0];
      var conditionA = restOfWords[2];

      // debugging:
      //print("because " + conditionA + ", " + resultB);

      var becauseIsTrue = because(conditionA, resultB, world, rVs, model, params);

      return doubleNegation ? becauseIsTrue : negation ? !becauseIsTrue : becauseIsTrue;
    }
  }
});

var literalERP = cache(function(utterance) {
  var unfactoredERP = Enumerate(function() {
    var model = modelPrior();
    var params = getParams();
    var rand = models[model].rand;
    var generalRand = models[model].rand;
    var rand = generalRand(params);
    var vars = models[model].vars;
    var actualRVs = rand();
    var actualWorld = vars(actualRVs);
    //print(actualWorld);
    return {
      result: {
        A: actualWorld.A,
        B: actualWorld.B,
        model: model,
        p0: params[0],
        p1: params[1]
      },
      factor: meaning_factor(utterance, actualWorld, actualRVs, model, params) +
        meaning_factor('B', actualWorld)
    };
  });
  return checkPossible(unfactoredERP);
});

var alpha = 5;

var getCostUtterance = function(utterance) {
  if (utterance == "nothing") {
    return 0;
  } else {
    var words = utterance.split(" ");
    return words.length;
  }
};

var basePropositions = [
  // 'A', 'B', '!A', '!B',
  // 'A & B', 'A & !B', '!A & B', '!A & !B',
  'B because A', 'B because !A', 'B because B'
  // 'A because B', 'A because !B',
  // '!B because A', '!B because !A',
  // '!A because B', '!A because !B'
];

var getUtterancePrior = function(utterance) {
  var getAlternativeUtterances = function(utterance) {
    return [utterance, "nothing", "itisnotthecasethat " + utterance].concat(
      basePropositions
    );
  };
  var utterances = getAlternativeUtterances(utterance);
  var costs = map(getCostUtterance, utterances);
  return function() {
    var probabilities = map(function(x) {return Math.exp(-x);}, costs);
    return utterances[discrete(probabilities)];
  };
};

var speakerERP = cache(function(world, baseUtterance, model, params) {
  var utterancePrior = getUtterancePrior(baseUtterance);
  var desiredInterpretation = {
    A: world.A,
    B: world.B,
    model: model,
    p0: params[0],
    p1: params[1]
  };
  var unfactoredERP = Enumerate(function() {
    var utterance = utterancePrior();
    //print(utterance);
    var interpretation = literalERP(utterance);
    return {
      factor: interpretation == 'impossible' ? -Infinity : interpretation.score([], desiredInterpretation),
      result: utterance
    };
  });
  return checkPossible(unfactoredERP);
});

var listenerERP = cache(function(utterance) {
  return Enumerate(function() {
    var model = modelPrior();
    var params = getParams();
    var rand = models[model].rand;
    var generalRand = models[model].rand;
    var rand = generalRand(params);
    var vars = models[model].vars;
    var actualRVs = rand();
    var actualWorld = vars(actualRVs);
    //print(actualWorld);
    var description = speakerERP(actualWorld, utterance, model, params /*give speaker utterance to generate relevant alternatives*/);
    factor(
      description == 'impossible' ? -Infinity : description.score([], utterance) * alpha +
        meaning_factor('B', actualWorld)
    );
    return {
      model: model,
      p0: params[0],
      p1: params[1]
    };
  });
});

var speaker2ERP = function(utterance, world, model, params) {
  var s2Utterances = [utterance, "itisnotthecasethat " + utterance];
  var s2costs = map(getCostUtterance, s2Utterances);
  var s2UtterancePrior = function() {
    var probabilities = map(function(x) {return Math.exp(-x);}, s2costs);
    return s2Utterances[discrete(probabilities)];
  };
  var desiredInterpretation = {
    model: model,
    p0: params[0],
    p1: params[1]
  }
  return Enumerate(function() {
    var utt = s2UtterancePrior();
    var interpretation = listenerERP(utt);
    factor( interpretation.score([], desiredInterpretation) );
    return utt==utterance ? 'yes' : 'no';
  });
};

// ======== examples =========

print('print("B because !A; cause !A")');
printERP(speaker2ERP('B because !A', {B: true, A: false}, 'cause', [0.5, 0.9]));
print('print("B because B; cause !A")');
printERP(speaker2ERP('B because B', {B: true, A: false}, 'cause', [0.5, 0.9]));

print('print("B because A; cause A")');
printERP(speaker2ERP('B because A', {B: true, A: true}, 'cause', [0.5, 0.9]));
print('print("B because B; cause A")');
printERP(speaker2ERP('B because B', {B: true, A: true}, 'cause', [0.5, 0.9]));


print('print("B because !A; reverseCause !A")');
printERP(speaker2ERP('B because !A', {B: true, A: false}, 'reverseCause', [0.5, 0.9]));
print('print("B because B; reverseCause !A")');
printERP(speaker2ERP('B because B', {B: true, A: false}, 'reverseCause', [0.5, 0.9]));

print('print("B because A; reverseCause A")');
printERP(speaker2ERP('B because A', {B: true, A: true}, 'reverseCause', [0.5, 0.9]));
print('print("B because B; reverseCause A")');
printERP(speaker2ERP('B because B', {B: true, A: true}, 'reverseCause', [0.5, 0.9]));


print('print("B because !A; commonCause !A")');
printERP(speaker2ERP('B because !A', {B: true, A: false}, 'commonCause', [0.5, 0.9]));
print('print("B because B; commonCause !A")');
printERP(speaker2ERP('B because B', {B: true, A: false}, 'commonCause', [0.5, 0.9]));

print('print("B because A; commonCause A")');
printERP(speaker2ERP('B because A', {B: true, A: true}, 'commonCause', [0.5, 0.9]));
print('print("B because B; commonCause A")');
printERP(speaker2ERP('B because B', {B: true, A: true}, 'commonCause', [0.5, 0.9]));


print('print("B because !A; independent !A")');
printERP(speaker2ERP('B because !A', {B: true, A: false}, 'independent', [0.5, 0.9]));
print('print("B because B; independent !A")');
printERP(speaker2ERP('B because B', {B: true, A: false}, 'independent', [0.5, 0.9]));

print('print("B because A; independent A")');
printERP(speaker2ERP('B because A', {B: true, A: true}, 'independent', [0.5, 0.9]));
print('print("B because B; independent A")');
printERP(speaker2ERP('B because B', {B: true, A: true}, 'independent', [0.5, 0.9]));

"finished"