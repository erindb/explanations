// ======== compatibility with browser =========

var print = function(str) {
  console.log(str);
};

var printERP = function(erp) {
  var support = erp.support();
  var probs = map(function(x) {return Math.exp(erp.score([], x));}, support);
  print("var s = " + support + ";");
  print("var p = " + probs + ";");
  print("vizPrint(Enumerate(function() {return s[discrete(p)];}))")
};

// ======== other utilities =========

var contextualEval = cache(function(proposition, world) {
  var context = reduce(
    function(keyVal, acc) {
      return acc + ' var ' + keyVal[0] + ' = ' + JSON.stringify(keyVal[1]) + ';';
    },
    "",
    _.pairs(world)
  );
  print(context);
  print(context + proposition + ';');
  return webpplEval(context + proposition + ';');
});

// ======== model specification =========

//// exogenous random variables
var rand = function() {
  return {
    PaperDueTomorrow: flip(0.5),
    PaperAlreadyFinished: flip(0.5),
    BobReasonable: flip(0.9),
    Action: randomInteger(11)/10,
    CoffeeWorks: flip(0.9),
    AllNighterWorks: flip(0.9)
  };
};

//// background: before agent's actions
var backgroundModel = function(RVs) {
  var paperDueTomorrow = RVs.PaperDueTomorrow;
  var paperAlreadyFinished = RVs.PaperAlreadyFinished;
  // agent's goal: probably wants to finish paper. maybe doesn't care.
  var bobsGoal = (RVs.BobReasonable & paperDueTomorrow & !paperAlreadyFinished) ? 'finishPaper' : 'true';
  return {
    paperDueTomorrow: paperDueTomorrow,
    paperAlreadyFinished: paperAlreadyFinished,
    bobsGoal: bobsGoal
  };
};

//// causal model that agent accurately understands about what follows the agent's actions
var causalModel = function(act, background, RVs) {
  var drink = act ? 'coffee' : 'herbal tea';
  var isCaffeinated = function(drink) { return drink == 'coffee'; };
  var stayUp = isCaffeinated(drink) ? RVs.CoffeeWorks : false;
  var finishPaper = background.paperAlreadyFinished ? true : stayUp ? RVs.AllNighterWorks : false;
  return {
    drink: drink,
    drinkIsCaffeinated: isCaffeinated(drink),
    stayUp: stayUp,
    finishPaper: finishPaper
  };
};

var vars = cache(function(RVs) {
  var background = backgroundModel(RVs);

  var agentERP = Enumerate(function() {
    var actionPrior = function() { flip(0.9); };
    var act = actionPrior();
    var imaginedRVs = rand();
    var outcome = causalModel(act, background, imaginedRVs);
    condition(contextualEval(background.bobsGoal, outcome));
    return act;
  });

  var probAct = Math.exp(agentERP.score([], true));
  var act = probAct >= RVs.Action;

  var outcome = causalModel(act, background, RVs);

  return {
    paperDueTomorrow: background.paperDueTomorrow,
    paperAlreadyFinished: background.paperAlreadyFinished,
    bobsGoal: background.bobsGoal,
    drink: outcome.drink,
    drinkIsCaffeinated: outcome.drinkIsCaffeinated,
    stayUp: outcome.stayUp,
    finishPaper: outcome.finishPaper
  };
});

// ======== parameters and counterfactual functions =========

// parameter for how similar counterfactual world is to actual world
var stickiness = 0.5;

var stickyRand = function(actualRVs) {
  var freshRVs = rand();
  return mapObject(function(key, val) {
    return flip(stickiness) ? actualRVs[key] : freshRVs[key];
  }, actualRVs);
};

var checkPossible = function(unfactoredERP) {
  var factorERP = Enumerate(function() {
    return sample(unfactoredERP).factor;
  });
  if (factorERP.score([], -Infinity) == 0) {
    // a sort of way of throwing errors if we try to evaluate an impossible utterance
    return 'impossible';
  } else {
    return Enumerate(function() {
      var result = sample(unfactoredERP);
      factor(result.factor);
      return result.result;
    });
  }
};

var counterfactualERP = cache(function(ifA, thenB, actualRVs) {
  //print(ifA);
  //print(thenB);
  //print(actualRVs);
  var unfactoredERP = Enumerate(function() {
    var counterfactualRVs = stickyRand(actualRVs);
    //print(counterfactualRVs);
    var counterfactualWorld = vars(counterfactualRVs);
    //print(counterfactualWorld);
    return {
      result: contextualEval(thenB, counterfactualWorld),
      factor: (contextualEval(ifA, counterfactualWorld) ? 0 : -Infinity)
    }
  });
  //unfactoredERP.print();
  return checkPossible(unfactoredERP);
});

// ======== literal meaning functions =========

var because = cache(function(conditionA, resultB, actualWorld, actualRVs) {
  var actuallyA = contextualEval(conditionA, actualWorld);
  var actuallyB = contextualEval(resultB, actualWorld);

  // debugging:
  //print(conditionA + "? " + actuallyA);
  //print(resultB + "? " + actuallyB);

  if (actuallyA & actuallyB) {
    // debugging:
    //print("both true!");

    var ifNotA = "!" + conditionA;
    var thenNotB = "!" + resultB;

    // debugging:
    //print("if " + ifNotA + " then " + thenNotB);

    var cfERP = counterfactualERP(ifNotA, thenNotB, actualRVs);
    //print("because " + conditionA + ", " + resultB);
    //cfERP.print();
    return cfERP == 'impossible' ? -Infinity : cfERP.score([], true);;
  } else {
    return -Infinity;
  }
});

/*
   meaning_factor is -Infinity if the utterance is completely false
   in the world, 0 if the utterance is true, and for "because" utterances
   it is the proportion of counterfactual worlds satisfying conditionA
   in which resultB is also true.
*/
var meaning_factor = cache(function(utterance, world, rVs) {
  if (utterance == 'nothing') {
    return 0;
  } else {
    var words = utterance.split(' ');
    var negation = words[0] == "itisnotthecasethat";
    var doubleNegation = negation ? words[1] == "itisnotthecasethat" : false;
    var restOfWords = doubleNegation ? words.slice(2) : negation ? words.slice(1) : words;
    if (restOfWords.length < 2 | restOfWords[1] != 'because') {
      var isTrue = contextualEval(restOfWords.join(' '), world);
      // if negation, check that negated utterance is true
      return (doubleNegation ? isTrue : negation ? !isTrue : isTrue) ? 0 : -Infinity;
    } else {
      // "resultB because conditionA"
      var resultB = restOfWords[0];
      var conditionA = restOfWords[2];

      // debugging:
      //print("because " + conditionA + ", " + resultB);

      var becauseIsTrue = because(conditionA, resultB, world, rVs);

      return doubleNegation ? becauseIsTrue : negation ? !becauseIsTrue : becauseIsTrue;
    }
  }
});

var literalERP = cache(function(utterance) {
  var unfactoredERP = Enumerate(function() {
    var actualRVs = rand();
    var actualWorld = vars(actualRVs);
    //print(actualWorld);
    return {
      result: actualWorld,
      factor: meaning_factor(utterance, actualWorld, actualRVs)
    };
  });
  return checkPossible(unfactoredERP);
});

var alpha = 5;

var getCostUtterance = function(utterance) {
  if (utterance == "nothing") {
    return 0;
  } else {
    var words = utterance.split(" ");
    var chars = utterance.split("");
    var negs = filter(function(x) {return x == "!";}, chars);
    return words.length;
  }
};

var basePropositions = function() {
  var RVs = rand();
  var world = vars(RVs);
  return map(
    function(keyVal) {
      return keyVal[0];
    },
    filter(
      function(keyVal) {
        return typeof(keyVal[1]) == 'boolean';
      },
      _.pairs(world)
    )
  );
}();

var getUtterancePrior = function(utterance) {
  var getAlternativeUtterances = function(utterance) {
    var negPropositions = map(function(p) {return "!" + p;}, basePropositions);
    var simplePropositions = negPropositions.concat(basePropositions);
    return [utterance, "nothing", "itisnotthecasethat " + utterance].concat(
      simplePropositions
    );
  };
  var utterances = getAlternativeUtterances(utterance);
  var costs = map(getCostUtterance, utterances);
  return function() {
    var probabilities = map(function(x) {return Math.exp(-x);}, costs);
    return utterances[discrete(probabilities)];
  };
};

var speakerERP = cache(function(world, baseUtterance) {
  var utterancePrior = getUtterancePrior(baseUtterance);
  var unfactoredERP = Enumerate(function() {
    var utterance = utterancePrior();
    print(utterance);
    var interpretation = literalERP(utterance);
    return {
      factor: interpretation == 'impossible' ? -Infinity : interpretation.score([], world),
      result: utterance
    };
  });
  return checkPossible(unfactoredERP);
});

var listenerERP = cache(function(utterance) {
  return Enumerate(function() {
    var actualRVs = rand();
    var actualWorld = vars(actualRVs);
    //print(actualWorld);
    var description = speakerERP(actualWorld, utterance /*give speaker utterance to generate relevant alternatives*/);
    factor(
      description == 'impossible' ? -Infinity : description.score([], utterance) * alpha
    );
    return actualWorld;
  });
});

var speaker2ERP = function(utterance, world) {
  var s2Utterances = [utterance, "itisnotthecasethat " + utterance];
  var s2costs = map(getCostUtterance, s2Utterances);
  var s2UtterancePrior = function() {
    var probabilities = map(function(x) {return Math.exp(-x);}, s2costs);
    return s2Utterances[discrete(probabilities)];
  };
  return Enumerate(function() {
    var utt = s2UtterancePrior();
    var interpretation = listenerERP(utt);
    factor( interpretation.score([], world) );
    return utt;
  });
};

// ======== examples =========

printERP(speakerERP(
  { paperDueTomorrow: false,
      paperAlreadyFinished: false,
      bobsGoal: 'true',
      drink: 'coffee',
      drinkIsCaffeinated: true,
      stayUp: false,
      finishPaper: false
  }, 'drink=="coffee"'
));

// print('basic world: stay up because want finish paper (teleo)')
// printERP(speaker2ERP(
//   'stayUp because bobsGoal=="finishPaper"',
//   {
//     paperDueTomorrow: true,
//     paperAlreadyFinished: false,
//     bobsGoal: 'finishPaper',
//     drink: 'coffee',
//     drinkIsCaffeinated: true,
//     stayUp: true,
//     finishPaper: true
//   }
// ));
// print('basic world: stay up because paper not finished (causal)')
// printERP(speaker2ERP(
//   'stayUp because !paperAlreadyFinished',
//   {
//     paperDueTomorrow: true,
//     paperAlreadyFinished: false,
//     bobsGoal: 'finishPaper',
//     drink: 'coffee',
//     drinkIsCaffeinated: true,
//     stayUp: true,
//     finishPaper: true
//   }
// ));
// print('basic world: stay up because paper not finished (causal)')
// printERP(speaker2ERP(
//   'stayUp because !paperAlreadyFinished',
//   {
//     paperDueTomorrow: true,
//     paperAlreadyFinished: false,
//     bobsGoal: 'finishPaper',
//     drink: 'coffee',
//     drinkIsCaffeinated: true,
//     stayUp: true,
//     finishPaper: true
//   }
// ));


"finished"

// Why did Bob stay up all night?
// - to finish the paper (teleo)
// - he drank coffee (causal)
// - his paper is due tomorrow (causal)
// - coffee makes you stay up late (causal + lawlike)
// - staying up all night can get papers finished (causal + lawlike)

// Why did Bob drink coffee?
// - because it's caffeinated
// - because it kept him up
// - because his paper is due tomorrow.
// - because it helped him finish the paper