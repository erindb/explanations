// ======== compatibility with  =========

var print = function(str) {
  console.log(str);
};

var printERP = function(erp) {
  var support = erp.support();
  var probs = map(function(x) {return Math.exp(erp.score([], x));}, support);
  print(support);
  print(probs);
};

// ======== model specification =========

// exogenous random variables
var rand = function() {
  return {
    uAS: flip(0.5),
    uAL: flip(0.3),
    uBS: flip(0.5),
    uBL: flip(0.3),
    uAW: flip(0.5)
  };
};

// endogenous variables are functions of the random state
var vars = function(rVs) {
  // strong is strength = 2; weak is strength = 1
  var aliceStrong = rVs.uAS;
  var aliceStrength = aliceStrong ? 2 : 1;
  var aliceLazy = rVs.uAL;
  var bobStrong = rVs.uBS;
  var bobStrength = bobStrong ? 2 : 1;
  var bobLazy = rVs.uBL;
  // laziness decreases strength by half
  var alicePulling = aliceLazy ? aliceStrength/2 : aliceStrength;
  var bobPulling = bobLazy ? bobStrength/2 : bobStrength;
  var aliceWin = (alicePulling>bobPulling)?true:(bobPulling>alicePulling)?false:rVs.uAW;
  
  return {
    aliceStrong: aliceStrong,
    aliceLazy: aliceLazy,
    bobStrong: bobStrong,
    bobLazy: bobLazy,
    aliceWin: aliceWin
  };
};

// ======== parameters and counterfactual functions =========

// parameter for how similar counterfactual world is to actual world
var stickiness = 0.5;

var stickyRand = function(actualRVs) {
  var freshRVs = rand();
  return mapObject(function(key, val) {
    return flip(stickiness) ? actualRVs[key] : freshRVs[key];
  }, actualRVs);
};

var contextualEval = cache(function(proposition, world) {
  var context = 'var aliceStrong = ' + JSON.stringify(world.aliceStrong) + ';' +
      'var aliceLazy = ' + JSON.stringify(world.aliceLazy) + ';' +
      'var bobStrong = ' + JSON.stringify(world.bobStrong) + ';' +
      'var bobLazy = ' + JSON.stringify(world.bobLazy) + ';' +
      'var aliceWin = ' + JSON.stringify(world.aliceWin) + ';';
  //print(context + proposition);
  return(webpplEval(context + proposition));
});

var checkPossible = function(unfactoredERP) {
  var factorERP = Enumerate(function() {
    return sample(unfactoredERP).factor;
  });
  if (factorERP.score([], -Infinity) == 0) {
    // a sort of way of throwing errors if we try to evaluate an impossible utterance
    return 'impossible';
  } else {
    return Enumerate(function() {
      var result = sample(unfactoredERP);
      factor(result.factor);
      return result.result;
    });
  }
};

var counterfactualERP = function(ifA, thenB, actualRVs) {
  //print(ifA);
  //print(thenB);
  //print(actualRVs);
  var unfactoredERP = Enumerate(function() {
    var counterfactualRVs = stickyRand(actualRVs);
    //print(counterfactualRVs);
    var counterfactualWorld = vars(counterfactualRVs);
    //print(counterfactualWorld);
    return {
      result: contextualEval(thenB, counterfactualWorld),
      factor: (contextualEval(ifA, counterfactualWorld) ? 0 : -Infinity)
    }
  });
  //unfactoredERP.print();
  return checkPossible(unfactoredERP);
};

// ======== literal meaning functions =========

var because = function(conditionA, resultB, actualWorld, actualRVs) {
  var actuallyA = contextualEval(conditionA, actualWorld);
  var actuallyB = contextualEval(resultB, actualWorld);

  // debugging:
  //print(conditionA + "? " + actuallyA);
  //print(resultB + "? " + actuallyB);

  if (actuallyA & actuallyB) {
    // debugging:
    //print("both true!");

    var ifNotA = "!" + conditionA;
    var thenNotB = "!" + resultB;

    // debugging:
    //print("if " + ifNotA + " then " + thenNotB);

    var cfERP = counterfactualERP(ifNotA, thenNotB, actualRVs);
    //print("because " + conditionA + ", " + resultB);
    //cfERP.print();
    return cfERP == 'impossible' ? -Infinity : cfERP.score([], true);;
  } else {
    return -Infinity;
  }
};

/*
   meaning_factor is -Infinity if the utterance is completely false
   in the world, 0 if the utterance is true, and for "because" utterances
   it is the proportion of counterfactual worlds satisfying conditionA
   in which resultB is also true.
*/
var meaning_factor = cache(function(utterance, world, rVs) {
  if (utterance == 'nothing') {
    return 0;
  } else {
    var words = utterance.split(' ');
    if (words.length < 2 | words[1] != 'because') {
      return contextualEval(utterance, world) ? 0 : -Infinity;
    } else {
      // "resultB because conditionA"
      var resultB = words[0];
      var conditionA = words[2];

      // debugging:
      //print("because " + conditionA + ", " + resultB);

      return because(conditionA, resultB, world, rVs);
    }
  }
});

var literalERP = cache(function(utterance) {
  var unfactoredERP = Enumerate(function() {
    var actualRVs = rand();
    var actualWorld = vars(actualRVs);
    //print(actualWorld);
    return {
      result: actualWorld,
      factor: meaning_factor(utterance, actualWorld, actualRVs)
    };
  });
  return checkPossible(unfactoredERP);
});

var getAlternativeUtterances = function(basePropositions) {
  var nothing = ["nothing"];
  var negPropositions = map(function(p) {return "!" + p;}, basePropositions);
  var simplePropositions = negPropositions.concat(basePropositions);
  var propositionPairs = [].concat.apply(
    [],
    map(
      function(a) {
        return map(
          function(b) {
            return [a,b];
          },
          simplePropositions
        );
      },
      simplePropositions
    )
  );
  // because pairs for everything in both directions
  var becausePropositions = map(
    function(lst) {return lst[0] + " because " + lst[1];},
    filter(
      function(lst) {
        return lst[0] != lst[1];
      },
      propositionPairs
    )
  );
  var conjunctionPropositions = map(
    function(lst) {return lst[0] + " & " + lst[1];},
    filter(
      function(lst) {
        var notSame = lst[0] != lst[1];
        var ordered = lst[0] > lst[1];
        return notSame & ordered;
      },
      propositionPairs
    )
  );
  return nothing.concat(
    simplePropositions
  ).concat(
    becausePropositions
  ).concat(
    conjunctionPropositions
  );
};

var utterances = getAlternativeUtterances(
  ['aliceStrong', 'aliceLazy', 'bobStrong', 'bobLazy', 'aliceWin']
);

var alpha = 5;

var costs = map(function(utterance) {
  if (utterance == "nothing") {
    return 0;
  } else {
    var words = utterance.split(" ");
    var chars = utterance.split("");
    var negs = filter(function(x) {return x == "!";}, chars);
    return words.length;
  }
}, utterances);

var utterancePrior = function() {
  var probabilities = map(function(x) {return Math.exp(-x);}, costs);
  return utterances[discrete(probabilities)];
};

var speakerERP = cache(function(world) {
  var unfactoredERP = Enumerate(function() {
    var utterance = utterancePrior();
    //print(utterance);
    var interpretation = literalERP(utterance);
    return {
      factor: interpretation == 'impossible' ? -Infinity : interpretation.score([], world),
      result: utterance
    };
  });
  return checkPossible(unfactoredERP);
});

var listenerERP = function(utterance) {
  return Enumerate(function() {
    var actualRVs = rand();
    var actualWorld = vars(actualRVs);
    //print(actualWorld);
    var description = speakerERP(actualWorld);
    factor(
      description == 'impossible' ? -Infinity : description.score([], utterance) * alpha
    );
    return actualWorld;
  });
};

// ======== example =========

//print(Enumerate(utterancePrior));
/*speakerERP({
  aliceStrong: true, aliceLazy: true,
  bobStrong: true, bobLazy: true,
  aliceWin: true
});*/

//literalERP('bacon & neighbors').print();
//literalERP('neighbors because bacon');

//listenerERP('aliceWin & bobLazy').print();
//listenerERP('aliceWin because bobLazy');

print('aliceWin because bobLazy');
printERP(literalERP('aliceWin because bobLazy'));
printERP(listenerERP('aliceWin because bobLazy'));
// // bob probably did his best

// print("");

print('aliceWin because aliceStrong');
printERP(literalERP('aliceWin because aliceStrong'));
printERP(listenerERP('aliceWin because aliceStrong'));
// // bob probably did his best

// print("");

print('aliceWin because !aliceLazy');
printERP(literalERP('aliceWin because !aliceLazy'));
printERP(listenerERP('aliceWin because !aliceLazy'));
// // alice and bob probably have similar strengths

// print("");

print('aliceWin because !bobStrong');
printERP(literalERP('aliceWin because !bobStrong'));
printERP(listenerERP('aliceWin because !bobStrong'));
// // alice is probably also weak

"finished"