// ======== compatibility with  =========

var print = function(str) {
  console.log(str);
};

var printERP = function(erp) {
  var support = erp.support();
  var probs = map(function(x) {return Math.exp(erp.score([], x));}, support);
  print("var s = " + JSON.stringify(support) + ";");
  print("var p = " + JSON.stringify(probs) + ";");
  print("print(Enumerate(function() {return s[discrete(p)];}))")
};

var vizPrint = function(erp) {
  var support = erp.support();
  var probs = map(function(x) {return Math.exp(erp.score([], x));}, support);
  print("var s = " + JSON.stringify(support) + ";");
  print("var p = " + JSON.stringify(probs) + ";");
  print("vizPrint(Enumerate(function() {return s[discrete(p)];}))")
};

var worldstring = function(w) {
  return (w.goal?'G':'-') + (w.action?'A':'-') + (w.outcome?'O':'-');
};

var strPrint = function(erp) {
  var support = erp.support();
  var probs = map(function(x) {return Math.exp(erp.score([], x));}, support);
  print("var s = " + JSON.stringify(map(worldstring, support)) + ";");
  print("var p = " + JSON.stringify(probs) + ";");
  print("print(Enumerate(function() {return s[discrete(p)];}))")
};

// ======== other utilities =========

var contextualEval = cache(function(proposition, world) {
  var context = reduce(
    function(keyVal, acc) {
      return acc + ' var ' + keyVal[0] + ' = ' + JSON.stringify(keyVal[1]) + ';';
    },
    "",
    _.pairs(world)
  );
  return webpplEval(context + proposition + ';');
});

// ======== model specification =========

// exogenous random variables
var rand = function() {
  return {
    uG: flip(0.5), // p(goal)
    uA: flip(0.3), // p(action | no goal)
    uAX: flip(0.9), // p(X | action)
    uX: flip(0.1), // background p(X | !action)
    uR: uniformDraw([0.0, 0.333, 0.6666, 1.0])
    //uR: uniformDraw(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0);
  };
};

// endogenous variables are functions of the random state
var vars = cache(function(rVs) {

  var outcomeFn = function(internalAction, internalRVs) {
    //     if action,     then p(X | action). else p(X|!action)
    return internalAction ? internalRVs.uAX : internalRVs.uX;
  };

  var goal = rVs.uG;

  var actionERP = Enumerate(function() {
    var imaginedRVs = rand();
    var imaginedAction = imaginedRVs.uA; // imagine action based on priors
    var imaginedOutcome = outcomeFn(imaginedAction, imaginedRVs);
    condition( goal ? imaginedOutcome : true );
    return imaginedAction;
  });
  var probAction = Math.exp(actionERP.score([], true));

  var action = rVs.uR <= probAction; // sample from actionERP using rVs.uR
  var outcome = outcomeFn(action, rVs);

  return {
    goal: goal,
    action: action,
    outcome: outcome
  };
});

// ======== parameters and counterfactual functions =========

// parameter for how similar counterfactual world is to actual world
var stickiness = 0.5;

var stickyRand = function(actualRVs) {
  var freshRVs = rand();
  return mapObject(function(key, val) {
    return flip(stickiness) ? actualRVs[key] : freshRVs[key];
  }, actualRVs);
};

var contextualEval = cache(function(proposition, world) {
  var context = reduce(
    function(keyVal, acc) {
      return acc + ' var ' + keyVal[0] + ' = ' + JSON.stringify(keyVal[1]) + ';';
    },
    "",
    _.pairs(world)
  );
  return webpplEval(context + proposition + ';');
});

var checkPossible = function(unfactoredERP) {
  var factorERP = Enumerate(function() {
    return sample(unfactoredERP).factor;
  });
  if (factorERP.score([], -Infinity) == 0) {
    // a sort of way of throwing errors if we try to evaluate an impossible utterance
    return 'impossible';
  } else {
    return Enumerate(function() {
      var result = sample(unfactoredERP);
      factor(result.factor);
      return result.result;
    });
  }
};

var counterfactualERP = function(ifA, thenB, actualRVs) {
  var unfactoredERP = Enumerate(function() {
    var counterfactualRVs = stickyRand(actualRVs);
    var counterfactualWorld = vars(counterfactualRVs);
    return {
      result: contextualEval(thenB, counterfactualWorld),
      factor: (contextualEval(ifA, counterfactualWorld) ? 0 : -Infinity)
    }
  });
  // let the counterfactual return impossible if it is
  return checkPossible(unfactoredERP);
};

// ======== literal meaning functions =========

var because = function(conditionA, resultB, actualWorld, actualRVs) {
  var actuallyA = contextualEval(conditionA, actualWorld);
  var actuallyB = contextualEval(resultB, actualWorld);

  if (actuallyA & actuallyB) {;
    var ifNotA = "!(" + conditionA + ")";
    var thenNotB = "!(" + resultB + ")";

    var cfERP = counterfactualERP(ifNotA, thenNotB, actualRVs);

    return cfERP == 'impossible' ? -Infinity : cfERP.score([], true);;
  } else {
    return -Infinity;
  }
};

/*
   meaning_factor is -Infinity if the utterance is completely false
   in the world, 0 if the utterance is true, and for "because" utterances
   it is the proportion of counterfactual worlds satisfying conditionA
   in which resultB is also true.
*/
var meaning_factor = cache(function(utterance, world, rVs) {
  if (utterance == 'nothing') {
    return 0; // saying nothing doesn't update prior beliefs
  } else {
    var words = utterance.split(' ');

    // if the utterance doesn't have "because" in it, just evaluate it in the world
    if (words.length < 2 | words[1] != 'because') {
      var isTrue = contextualEval(words.join(' '), world);
      return (isTrue ? 0 : -Infinity);
    } else {
      // "resultB because conditionA"
      var resultB = words[0];
      var conditionA = words[2];

      var becauseFactor = because(conditionA, resultB, world, rVs);
      return becauseFactor;
    }
  }
});

var literalERP = cache(function(utterance, presup) {
  var unfactoredERP = Enumerate(function() {
    var actualRVs = rand();
    var actualWorld = vars(actualRVs);
    return {
      factor: meaning_factor(utterance, actualWorld, actualRVs) + meaning_factor(presup, actualWorld),
      result: actualWorld
    };
  });
  return checkPossible(unfactoredERP);
});

var marginalize = function(erp, variable) {
  return Enumerate(function() {
    var res = sample(erp);
    return res[variable];
  });
};

var alpha = 5;

// utility to get cost of utterance based on number of words
var getCostUtterance = function(utterance) {
  if (utterance == "nothing") {
    return 0;
  } else {
    var words = utterance.split(" ");
    var chars = utterance.split("");
    var negs = filter(function(x) {return x == "!";}, chars);
    return words.length;
  }
};

// utility to grab Booleans from world
var basePropositions = function() {
  var RVs = rand();
  var world = vars(RVs);
  return map(
    function(keyVal) {
      return keyVal[0];
    },
    filter(
      function(keyVal) {
        return typeof(keyVal[1]) == 'boolean';
      },
      _.pairs(world)
    )
  );
}();

var getUtterancePrior = function(baseUtterance) {
  // alternatives are:
  //   - nothing + all basic propositions and their negations for most things
  //   - nothing + "B because " if the utterance is "B because X"
  var getAlternativeUtterances = function(baseUtterance) {
    // grab booleans and negate them to get all basic utterances and their negations
    var negPropositions = map(function(p) {return "!" + p + "";}, basePropositions);
    var simplePropositions = negPropositions.concat(basePropositions);
    var words = baseUtterance.split(" ");

    // if the utterance doesn't have "because" in it, all simple props and the utterance
    if (words.length < 2 | words[1] != 'because') {
      return ['nothing', baseUtterance].concat(simplePropositions);
    } else {
      // if utterance does have "because" in it, explain the consequence in some other way
      var resultB = words[0];
      return ['nothing'].concat(
        map(function(simpleProp) {resultB + ' because ' + simpleProp}, simplePropositions)
      );
    }
  };
  var utterances = getAlternativeUtterances(baseUtterance);
  var costs = map(getCostUtterance, utterances);
  return function() {
    var probabilities = map(function(x) {return Math.exp(-x);}, costs);
    return utterances[discrete(probabilities)];
  };
};

var speakerERP = cache(function(utterance, world, presup) {
  var utterancePrior = getUtterancePrior(utterance);
  var unfactoredERP = Enumerate(function() {
    var utterance = utterancePrior();
    var interpretation = literalERP(utterance, presup);
    return {
      factor: interpretation == 'impossible' ? -Infinity : interpretation.score([], world),
      result: utterance
    };
  });
  return checkPossible(unfactoredERP);
});

var listenerERP = cache(function(utterance, presup) {
  var unfactoredERP = Enumerate(function() {
    var actualRVs = rand();
    var actualWorld = vars(actualRVs);
    var description = speakerERP(utterance, actualWorld, presup);
    return {
      factor: (description == 'impossible' ? -Infinity : description.score([], utterance) * alpha) +
              meaning_factor(presup, actualWorld),
      result: worldstring(actualWorld)
      // can presuppose stuff here, e.g. "B" in "why B?"
    };
  });
  return checkPossible(unfactoredERP);
});

var speaker2ERP = function(utterance, world, presup) {
  var utterances = [utterance, 'nothing'];
  return Enumerate(function() {
    var utt = uniformDraw(utterances);
    var interpretation = listenerERP(utt, presup);
    var f = interpretation == 'impossible' ? -Infinity : interpretation.score([], world);
    factor( f );
    return utt == utterance ? 'yes' : 'no';
  });
};

// ======== examples =========

// // check basic world
// strPrint(Enumerate(function() {
//   var actualRVs = rand();
//   var actualWorld = vars(actualRVs);
//   return actualWorld;
// }));

// // check setup matches numbers
// printERP(marginalize(literalERP('true', 'true'), 'goal'));
// printERP(marginalize(literalERP('goal', 'true'), 'action'));
// printERP(marginalize(literalERP('!goal', 'true'), 'action'));
// printERP(marginalize(literalERP('action', 'true'), 'outcome'));
// printERP(marginalize(literalERP('!action', 'true'), 'outcome'));

// strPrint(literalERP('action because goal', 'true'));
// strPrint(literalERP('nothing', 'true'));

// strPrint(listenerERP('action because goal', 'true'));
// strPrint(listenerERP('nothing', 'true'));

// strPrint(literalERP('action because goal', 'true')); // good
// strPrint(literalERP('action because outcome', 'true')); // ok

// strPrint(literalERP('goal because action', 'true')); // bad-ish
// strPrint(literalERP('outcome because action', 'true')); // good

print('print("action because goal")');
printERP(speaker2ERP(
  'action because goal',
  'GAO',
  'true'
));
print('print("why aciton? action because goal")');
printERP(speaker2ERP(
  'action because goal',
  'GAO',
  'action'
));

print('print("action because outcome")');
printERP(speaker2ERP(
  'action because outcome',
  'GAO',
  'true'
));
print('print("why aciton? action because outcome")');
printERP(speaker2ERP(
  'action because outcome',
  'GAO',
  'outcome'
));

print('print("goal because action")');
printERP(speaker2ERP(
  'goal because action',
  'GAO',
  'true'
));
print('print("why goal? goal because action")');
printERP(speaker2ERP(
  'goal because action',
  'GAO',
  'goal'
));

"finished"